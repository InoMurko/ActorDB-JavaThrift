/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.actordb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class Val extends org.apache.thrift.TUnion<Val, Val._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Val");
  private static final org.apache.thrift.protocol.TField BIGINT_FIELD_DESC = new org.apache.thrift.protocol.TField("bigint", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("integer", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SMALLINT_FIELD_DESC = new org.apache.thrift.protocol.TField("smallint", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField REAL_FIELD_DESC = new org.apache.thrift.protocol.TField("real", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bval", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ISNULL_FIELD_DESC = new org.apache.thrift.protocol.TField("isnull", org.apache.thrift.protocol.TType.BOOL, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIGINT((short)1, "bigint"),
    INTEGER((short)2, "integer"),
    SMALLINT((short)3, "smallint"),
    REAL((short)4, "real"),
    BVAL((short)5, "bval"),
    TEXT((short)6, "text"),
    ISNULL((short)7, "isnull");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIGINT
          return BIGINT;
        case 2: // INTEGER
          return INTEGER;
        case 3: // SMALLINT
          return SMALLINT;
        case 4: // REAL
          return REAL;
        case 5: // BVAL
          return BVAL;
        case 6: // TEXT
          return TEXT;
        case 7: // ISNULL
          return ISNULL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIGINT, new org.apache.thrift.meta_data.FieldMetaData("bigint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTEGER, new org.apache.thrift.meta_data.FieldMetaData("integer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SMALLINT, new org.apache.thrift.meta_data.FieldMetaData("smallint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.REAL, new org.apache.thrift.meta_data.FieldMetaData("real", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BVAL, new org.apache.thrift.meta_data.FieldMetaData("bval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISNULL, new org.apache.thrift.meta_data.FieldMetaData("isnull", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Val.class, metaDataMap);
  }

  public Val() {
    super();
  }

  public Val(_Fields setField, Object value) {
    super(setField, value);
  }

  public Val(Val other) {
    super(other);
  }
  public Val deepCopy() {
    return new Val(this);
  }

  public static Val bigint(long value) {
    Val x = new Val();
    x.setBigint(value);
    return x;
  }

  public static Val integer(int value) {
    Val x = new Val();
    x.setInteger(value);
    return x;
  }

  public static Val smallint(short value) {
    Val x = new Val();
    x.setSmallint(value);
    return x;
  }

  public static Val real(double value) {
    Val x = new Val();
    x.setReal(value);
    return x;
  }

  public static Val bval(boolean value) {
    Val x = new Val();
    x.setBval(value);
    return x;
  }

  public static Val text(String value) {
    Val x = new Val();
    x.setText(value);
    return x;
  }

  public static Val isnull(boolean value) {
    Val x = new Val();
    x.setIsnull(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case BIGINT:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'bigint', but got " + value.getClass().getSimpleName());
      case INTEGER:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'integer', but got " + value.getClass().getSimpleName());
      case SMALLINT:
        if (value instanceof Short) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Short for field 'smallint', but got " + value.getClass().getSimpleName());
      case REAL:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'real', but got " + value.getClass().getSimpleName());
      case BVAL:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'bval', but got " + value.getClass().getSimpleName());
      case TEXT:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'text', but got " + value.getClass().getSimpleName());
      case ISNULL:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'isnull', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case BIGINT:
          if (field.type == BIGINT_FIELD_DESC.type) {
            Long bigint;
            bigint = iprot.readI64();
            return bigint;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INTEGER:
          if (field.type == INTEGER_FIELD_DESC.type) {
            Integer integer;
            integer = iprot.readI32();
            return integer;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SMALLINT:
          if (field.type == SMALLINT_FIELD_DESC.type) {
            Short smallint;
            smallint = iprot.readI16();
            return smallint;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REAL:
          if (field.type == REAL_FIELD_DESC.type) {
            Double real;
            real = iprot.readDouble();
            return real;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BVAL:
          if (field.type == BVAL_FIELD_DESC.type) {
            Boolean bval;
            bval = iprot.readBool();
            return bval;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TEXT:
          if (field.type == TEXT_FIELD_DESC.type) {
            String text;
            text = iprot.readString();
            return text;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ISNULL:
          if (field.type == ISNULL_FIELD_DESC.type) {
            Boolean isnull;
            isnull = iprot.readBool();
            return isnull;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BIGINT:
        Long bigint = (Long)value_;
        oprot.writeI64(bigint);
        return;
      case INTEGER:
        Integer integer = (Integer)value_;
        oprot.writeI32(integer);
        return;
      case SMALLINT:
        Short smallint = (Short)value_;
        oprot.writeI16(smallint);
        return;
      case REAL:
        Double real = (Double)value_;
        oprot.writeDouble(real);
        return;
      case BVAL:
        Boolean bval = (Boolean)value_;
        oprot.writeBool(bval);
        return;
      case TEXT:
        String text = (String)value_;
        oprot.writeString(text);
        return;
      case ISNULL:
        Boolean isnull = (Boolean)value_;
        oprot.writeBool(isnull);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case BIGINT:
          Long bigint;
          bigint = iprot.readI64();
          return bigint;
        case INTEGER:
          Integer integer;
          integer = iprot.readI32();
          return integer;
        case SMALLINT:
          Short smallint;
          smallint = iprot.readI16();
          return smallint;
        case REAL:
          Double real;
          real = iprot.readDouble();
          return real;
        case BVAL:
          Boolean bval;
          bval = iprot.readBool();
          return bval;
        case TEXT:
          String text;
          text = iprot.readString();
          return text;
        case ISNULL:
          Boolean isnull;
          isnull = iprot.readBool();
          return isnull;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BIGINT:
        Long bigint = (Long)value_;
        oprot.writeI64(bigint);
        return;
      case INTEGER:
        Integer integer = (Integer)value_;
        oprot.writeI32(integer);
        return;
      case SMALLINT:
        Short smallint = (Short)value_;
        oprot.writeI16(smallint);
        return;
      case REAL:
        Double real = (Double)value_;
        oprot.writeDouble(real);
        return;
      case BVAL:
        Boolean bval = (Boolean)value_;
        oprot.writeBool(bval);
        return;
      case TEXT:
        String text = (String)value_;
        oprot.writeString(text);
        return;
      case ISNULL:
        Boolean isnull = (Boolean)value_;
        oprot.writeBool(isnull);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case BIGINT:
        return BIGINT_FIELD_DESC;
      case INTEGER:
        return INTEGER_FIELD_DESC;
      case SMALLINT:
        return SMALLINT_FIELD_DESC;
      case REAL:
        return REAL_FIELD_DESC;
      case BVAL:
        return BVAL_FIELD_DESC;
      case TEXT:
        return TEXT_FIELD_DESC;
      case ISNULL:
        return ISNULL_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public long getBigint() {
    if (getSetField() == _Fields.BIGINT) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bigint' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBigint(long value) {
    setField_ = _Fields.BIGINT;
    value_ = value;
  }

  public int getInteger() {
    if (getSetField() == _Fields.INTEGER) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'integer' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInteger(int value) {
    setField_ = _Fields.INTEGER;
    value_ = value;
  }

  public short getSmallint() {
    if (getSetField() == _Fields.SMALLINT) {
      return (Short)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'smallint' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSmallint(short value) {
    setField_ = _Fields.SMALLINT;
    value_ = value;
  }

  public double getReal() {
    if (getSetField() == _Fields.REAL) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'real' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setReal(double value) {
    setField_ = _Fields.REAL;
    value_ = value;
  }

  public boolean getBval() {
    if (getSetField() == _Fields.BVAL) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bval' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBval(boolean value) {
    setField_ = _Fields.BVAL;
    value_ = value;
  }

  public String getText() {
    if (getSetField() == _Fields.TEXT) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'text' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setText(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEXT;
    value_ = value;
  }

  public boolean getIsnull() {
    if (getSetField() == _Fields.ISNULL) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'isnull' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIsnull(boolean value) {
    setField_ = _Fields.ISNULL;
    value_ = value;
  }

  public boolean isSetBigint() {
    return setField_ == _Fields.BIGINT;
  }


  public boolean isSetInteger() {
    return setField_ == _Fields.INTEGER;
  }


  public boolean isSetSmallint() {
    return setField_ == _Fields.SMALLINT;
  }


  public boolean isSetReal() {
    return setField_ == _Fields.REAL;
  }


  public boolean isSetBval() {
    return setField_ == _Fields.BVAL;
  }


  public boolean isSetText() {
    return setField_ == _Fields.TEXT;
  }


  public boolean isSetIsnull() {
    return setField_ == _Fields.ISNULL;
  }


  public boolean equals(Object other) {
    if (other instanceof Val) {
      return equals((Val)other);
    } else {
      return false;
    }
  }

  public boolean equals(Val other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Val other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
