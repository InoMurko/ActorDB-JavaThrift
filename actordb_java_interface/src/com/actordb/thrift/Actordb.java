/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.actordb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-16")
public class Actordb {

  public interface Iface {

    public String protocolVersion() throws org.apache.thrift.TException;

    public LoginResult login(String username, String password) throws InvalidRequestException, org.apache.thrift.TException;

    public String initialize(Server servers) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_single(String actorname, String actortype, String sql, List<String> flags) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_single_prepare(String actorname, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_multi(List<String> actors, String actortype, String sql, List<String> flags) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_multi_prepare(List<String> actors, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_all(String actortype, String sql, List<String> flags) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_all_prepare(String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_sql(String sql) throws InvalidRequestException, org.apache.thrift.TException;

    public Result exec_sql_prepare(String sql, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void protocolVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initialize(Server servers, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_single(String actorname, String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_single_prepare(String actorname, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_multi(List<String> actors, String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_multi_prepare(List<String> actors, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_all(String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_all_prepare(String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_sql(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exec_sql_prepare(String sql, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String protocolVersion() throws org.apache.thrift.TException
    {
      send_protocolVersion();
      return recv_protocolVersion();
    }

    public void send_protocolVersion() throws org.apache.thrift.TException
    {
      protocolVersion_args args = new protocolVersion_args();
      sendBase("protocolVersion", args);
    }

    public String recv_protocolVersion() throws org.apache.thrift.TException
    {
      protocolVersion_result result = new protocolVersion_result();
      receiveBase(result, "protocolVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "protocolVersion failed: unknown result");
    }

    public LoginResult login(String username, String password) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_login(username, password);
      return recv_login();
    }

    public void send_login(String username, String password) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("login", args);
    }

    public LoginResult recv_login() throws InvalidRequestException, org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public String initialize(Server servers) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_initialize(servers);
      return recv_initialize();
    }

    public void send_initialize(Server servers) throws org.apache.thrift.TException
    {
      initialize_args args = new initialize_args();
      args.setServers(servers);
      sendBase("initialize", args);
    }

    public String recv_initialize() throws InvalidRequestException, org.apache.thrift.TException
    {
      initialize_result result = new initialize_result();
      receiveBase(result, "initialize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initialize failed: unknown result");
    }

    public Result exec_single(String actorname, String actortype, String sql, List<String> flags) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_single(actorname, actortype, sql, flags);
      return recv_exec_single();
    }

    public void send_exec_single(String actorname, String actortype, String sql, List<String> flags) throws org.apache.thrift.TException
    {
      exec_single_args args = new exec_single_args();
      args.setActorname(actorname);
      args.setActortype(actortype);
      args.setSql(sql);
      args.setFlags(flags);
      sendBase("exec_single", args);
    }

    public Result recv_exec_single() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_single_result result = new exec_single_result();
      receiveBase(result, "exec_single");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_single failed: unknown result");
    }

    public Result exec_single_prepare(String actorname, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_single_prepare(actorname, actortype, sql, flags, bindingvals);
      return recv_exec_single_prepare();
    }

    public void send_exec_single_prepare(String actorname, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws org.apache.thrift.TException
    {
      exec_single_prepare_args args = new exec_single_prepare_args();
      args.setActorname(actorname);
      args.setActortype(actortype);
      args.setSql(sql);
      args.setFlags(flags);
      args.setBindingvals(bindingvals);
      sendBase("exec_single_prepare", args);
    }

    public Result recv_exec_single_prepare() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_single_prepare_result result = new exec_single_prepare_result();
      receiveBase(result, "exec_single_prepare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_single_prepare failed: unknown result");
    }

    public Result exec_multi(List<String> actors, String actortype, String sql, List<String> flags) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_multi(actors, actortype, sql, flags);
      return recv_exec_multi();
    }

    public void send_exec_multi(List<String> actors, String actortype, String sql, List<String> flags) throws org.apache.thrift.TException
    {
      exec_multi_args args = new exec_multi_args();
      args.setActors(actors);
      args.setActortype(actortype);
      args.setSql(sql);
      args.setFlags(flags);
      sendBase("exec_multi", args);
    }

    public Result recv_exec_multi() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_multi_result result = new exec_multi_result();
      receiveBase(result, "exec_multi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_multi failed: unknown result");
    }

    public Result exec_multi_prepare(List<String> actors, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_multi_prepare(actors, actortype, sql, flags, bindingvals);
      return recv_exec_multi_prepare();
    }

    public void send_exec_multi_prepare(List<String> actors, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws org.apache.thrift.TException
    {
      exec_multi_prepare_args args = new exec_multi_prepare_args();
      args.setActors(actors);
      args.setActortype(actortype);
      args.setSql(sql);
      args.setFlags(flags);
      args.setBindingvals(bindingvals);
      sendBase("exec_multi_prepare", args);
    }

    public Result recv_exec_multi_prepare() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_multi_prepare_result result = new exec_multi_prepare_result();
      receiveBase(result, "exec_multi_prepare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_multi_prepare failed: unknown result");
    }

    public Result exec_all(String actortype, String sql, List<String> flags) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_all(actortype, sql, flags);
      return recv_exec_all();
    }

    public void send_exec_all(String actortype, String sql, List<String> flags) throws org.apache.thrift.TException
    {
      exec_all_args args = new exec_all_args();
      args.setActortype(actortype);
      args.setSql(sql);
      args.setFlags(flags);
      sendBase("exec_all", args);
    }

    public Result recv_exec_all() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_all_result result = new exec_all_result();
      receiveBase(result, "exec_all");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_all failed: unknown result");
    }

    public Result exec_all_prepare(String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_all_prepare(actortype, sql, flags, bindingvals);
      return recv_exec_all_prepare();
    }

    public void send_exec_all_prepare(String actortype, String sql, List<String> flags, List<List<Val>> bindingvals) throws org.apache.thrift.TException
    {
      exec_all_prepare_args args = new exec_all_prepare_args();
      args.setActortype(actortype);
      args.setSql(sql);
      args.setFlags(flags);
      args.setBindingvals(bindingvals);
      sendBase("exec_all_prepare", args);
    }

    public Result recv_exec_all_prepare() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_all_prepare_result result = new exec_all_prepare_result();
      receiveBase(result, "exec_all_prepare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_all_prepare failed: unknown result");
    }

    public Result exec_sql(String sql) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_sql(sql);
      return recv_exec_sql();
    }

    public void send_exec_sql(String sql) throws org.apache.thrift.TException
    {
      exec_sql_args args = new exec_sql_args();
      args.setSql(sql);
      sendBase("exec_sql", args);
    }

    public Result recv_exec_sql() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_sql_result result = new exec_sql_result();
      receiveBase(result, "exec_sql");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_sql failed: unknown result");
    }

    public Result exec_sql_prepare(String sql, List<List<Val>> bindingvals) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_exec_sql_prepare(sql, bindingvals);
      return recv_exec_sql_prepare();
    }

    public void send_exec_sql_prepare(String sql, List<List<Val>> bindingvals) throws org.apache.thrift.TException
    {
      exec_sql_prepare_args args = new exec_sql_prepare_args();
      args.setSql(sql);
      args.setBindingvals(bindingvals);
      sendBase("exec_sql_prepare", args);
    }

    public Result recv_exec_sql_prepare() throws InvalidRequestException, org.apache.thrift.TException
    {
      exec_sql_prepare_result result = new exec_sql_prepare_result();
      receiveBase(result, "exec_sql_prepare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_sql_prepare failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void protocolVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      protocolVersion_call method_call = new protocolVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class protocolVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public protocolVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("protocolVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        protocolVersion_args args = new protocolVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_protocolVersion();
      }
    }

    public void login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String password;
      public login_call(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoginResult getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void initialize(Server servers, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initialize_call method_call = new initialize_call(servers, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initialize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Server servers;
      public initialize_call(Server servers, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.servers = servers;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initialize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initialize_args args = new initialize_args();
        args.setServers(servers);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initialize();
      }
    }

    public void exec_single(String actorname, String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_single_call method_call = new exec_single_call(actorname, actortype, sql, flags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_single_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String actorname;
      private String actortype;
      private String sql;
      private List<String> flags;
      public exec_single_call(String actorname, String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actorname = actorname;
        this.actortype = actortype;
        this.sql = sql;
        this.flags = flags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_single", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_single_args args = new exec_single_args();
        args.setActorname(actorname);
        args.setActortype(actortype);
        args.setSql(sql);
        args.setFlags(flags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_single();
      }
    }

    public void exec_single_prepare(String actorname, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_single_prepare_call method_call = new exec_single_prepare_call(actorname, actortype, sql, flags, bindingvals, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_single_prepare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String actorname;
      private String actortype;
      private String sql;
      private List<String> flags;
      private List<List<Val>> bindingvals;
      public exec_single_prepare_call(String actorname, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actorname = actorname;
        this.actortype = actortype;
        this.sql = sql;
        this.flags = flags;
        this.bindingvals = bindingvals;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_single_prepare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_single_prepare_args args = new exec_single_prepare_args();
        args.setActorname(actorname);
        args.setActortype(actortype);
        args.setSql(sql);
        args.setFlags(flags);
        args.setBindingvals(bindingvals);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_single_prepare();
      }
    }

    public void exec_multi(List<String> actors, String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_multi_call method_call = new exec_multi_call(actors, actortype, sql, flags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_multi_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> actors;
      private String actortype;
      private String sql;
      private List<String> flags;
      public exec_multi_call(List<String> actors, String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actors = actors;
        this.actortype = actortype;
        this.sql = sql;
        this.flags = flags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_multi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_multi_args args = new exec_multi_args();
        args.setActors(actors);
        args.setActortype(actortype);
        args.setSql(sql);
        args.setFlags(flags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_multi();
      }
    }

    public void exec_multi_prepare(List<String> actors, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_multi_prepare_call method_call = new exec_multi_prepare_call(actors, actortype, sql, flags, bindingvals, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_multi_prepare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> actors;
      private String actortype;
      private String sql;
      private List<String> flags;
      private List<List<Val>> bindingvals;
      public exec_multi_prepare_call(List<String> actors, String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actors = actors;
        this.actortype = actortype;
        this.sql = sql;
        this.flags = flags;
        this.bindingvals = bindingvals;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_multi_prepare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_multi_prepare_args args = new exec_multi_prepare_args();
        args.setActors(actors);
        args.setActortype(actortype);
        args.setSql(sql);
        args.setFlags(flags);
        args.setBindingvals(bindingvals);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_multi_prepare();
      }
    }

    public void exec_all(String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_all_call method_call = new exec_all_call(actortype, sql, flags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_all_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String actortype;
      private String sql;
      private List<String> flags;
      public exec_all_call(String actortype, String sql, List<String> flags, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actortype = actortype;
        this.sql = sql;
        this.flags = flags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_all", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_all_args args = new exec_all_args();
        args.setActortype(actortype);
        args.setSql(sql);
        args.setFlags(flags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_all();
      }
    }

    public void exec_all_prepare(String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_all_prepare_call method_call = new exec_all_prepare_call(actortype, sql, flags, bindingvals, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_all_prepare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String actortype;
      private String sql;
      private List<String> flags;
      private List<List<Val>> bindingvals;
      public exec_all_prepare_call(String actortype, String sql, List<String> flags, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actortype = actortype;
        this.sql = sql;
        this.flags = flags;
        this.bindingvals = bindingvals;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_all_prepare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_all_prepare_args args = new exec_all_prepare_args();
        args.setActortype(actortype);
        args.setSql(sql);
        args.setFlags(flags);
        args.setBindingvals(bindingvals);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_all_prepare();
      }
    }

    public void exec_sql(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_sql_call method_call = new exec_sql_call(sql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_sql_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      public exec_sql_call(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_sql", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_sql_args args = new exec_sql_args();
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_sql();
      }
    }

    public void exec_sql_prepare(String sql, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_sql_prepare_call method_call = new exec_sql_prepare_call(sql, bindingvals, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_sql_prepare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      private List<List<Val>> bindingvals;
      public exec_sql_prepare_call(String sql, List<List<Val>> bindingvals, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
        this.bindingvals = bindingvals;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_sql_prepare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_sql_prepare_args args = new exec_sql_prepare_args();
        args.setSql(sql);
        args.setBindingvals(bindingvals);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_sql_prepare();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("protocolVersion", new protocolVersion());
      processMap.put("login", new login());
      processMap.put("initialize", new initialize());
      processMap.put("exec_single", new exec_single());
      processMap.put("exec_single_prepare", new exec_single_prepare());
      processMap.put("exec_multi", new exec_multi());
      processMap.put("exec_multi_prepare", new exec_multi_prepare());
      processMap.put("exec_all", new exec_all());
      processMap.put("exec_all_prepare", new exec_all_prepare());
      processMap.put("exec_sql", new exec_sql());
      processMap.put("exec_sql_prepare", new exec_sql_prepare());
      return processMap;
    }

    public static class protocolVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, protocolVersion_args> {
      public protocolVersion() {
        super("protocolVersion");
      }

      public protocolVersion_args getEmptyArgsInstance() {
        return new protocolVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public protocolVersion_result getResult(I iface, protocolVersion_args args) throws org.apache.thrift.TException {
        protocolVersion_result result = new protocolVersion_result();
        result.success = iface.protocolVersion();
        return result;
      }
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        try {
          result.success = iface.login(args.username, args.password);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class initialize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initialize_args> {
      public initialize() {
        super("initialize");
      }

      public initialize_args getEmptyArgsInstance() {
        return new initialize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initialize_result getResult(I iface, initialize_args args) throws org.apache.thrift.TException {
        initialize_result result = new initialize_result();
        try {
          result.success = iface.initialize(args.servers);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_single<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_single_args> {
      public exec_single() {
        super("exec_single");
      }

      public exec_single_args getEmptyArgsInstance() {
        return new exec_single_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_single_result getResult(I iface, exec_single_args args) throws org.apache.thrift.TException {
        exec_single_result result = new exec_single_result();
        try {
          result.success = iface.exec_single(args.actorname, args.actortype, args.sql, args.flags);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_single_prepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_single_prepare_args> {
      public exec_single_prepare() {
        super("exec_single_prepare");
      }

      public exec_single_prepare_args getEmptyArgsInstance() {
        return new exec_single_prepare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_single_prepare_result getResult(I iface, exec_single_prepare_args args) throws org.apache.thrift.TException {
        exec_single_prepare_result result = new exec_single_prepare_result();
        try {
          result.success = iface.exec_single_prepare(args.actorname, args.actortype, args.sql, args.flags, args.bindingvals);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_multi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_multi_args> {
      public exec_multi() {
        super("exec_multi");
      }

      public exec_multi_args getEmptyArgsInstance() {
        return new exec_multi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_multi_result getResult(I iface, exec_multi_args args) throws org.apache.thrift.TException {
        exec_multi_result result = new exec_multi_result();
        try {
          result.success = iface.exec_multi(args.actors, args.actortype, args.sql, args.flags);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_multi_prepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_multi_prepare_args> {
      public exec_multi_prepare() {
        super("exec_multi_prepare");
      }

      public exec_multi_prepare_args getEmptyArgsInstance() {
        return new exec_multi_prepare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_multi_prepare_result getResult(I iface, exec_multi_prepare_args args) throws org.apache.thrift.TException {
        exec_multi_prepare_result result = new exec_multi_prepare_result();
        try {
          result.success = iface.exec_multi_prepare(args.actors, args.actortype, args.sql, args.flags, args.bindingvals);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_all<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_all_args> {
      public exec_all() {
        super("exec_all");
      }

      public exec_all_args getEmptyArgsInstance() {
        return new exec_all_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_all_result getResult(I iface, exec_all_args args) throws org.apache.thrift.TException {
        exec_all_result result = new exec_all_result();
        try {
          result.success = iface.exec_all(args.actortype, args.sql, args.flags);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_all_prepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_all_prepare_args> {
      public exec_all_prepare() {
        super("exec_all_prepare");
      }

      public exec_all_prepare_args getEmptyArgsInstance() {
        return new exec_all_prepare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_all_prepare_result getResult(I iface, exec_all_prepare_args args) throws org.apache.thrift.TException {
        exec_all_prepare_result result = new exec_all_prepare_result();
        try {
          result.success = iface.exec_all_prepare(args.actortype, args.sql, args.flags, args.bindingvals);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_sql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_sql_args> {
      public exec_sql() {
        super("exec_sql");
      }

      public exec_sql_args getEmptyArgsInstance() {
        return new exec_sql_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_sql_result getResult(I iface, exec_sql_args args) throws org.apache.thrift.TException {
        exec_sql_result result = new exec_sql_result();
        try {
          result.success = iface.exec_sql(args.sql);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class exec_sql_prepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_sql_prepare_args> {
      public exec_sql_prepare() {
        super("exec_sql_prepare");
      }

      public exec_sql_prepare_args getEmptyArgsInstance() {
        return new exec_sql_prepare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_sql_prepare_result getResult(I iface, exec_sql_prepare_args args) throws org.apache.thrift.TException {
        exec_sql_prepare_result result = new exec_sql_prepare_result();
        try {
          result.success = iface.exec_sql_prepare(args.sql, args.bindingvals);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("protocolVersion", new protocolVersion());
      processMap.put("login", new login());
      processMap.put("initialize", new initialize());
      processMap.put("exec_single", new exec_single());
      processMap.put("exec_single_prepare", new exec_single_prepare());
      processMap.put("exec_multi", new exec_multi());
      processMap.put("exec_multi_prepare", new exec_multi_prepare());
      processMap.put("exec_all", new exec_all());
      processMap.put("exec_all_prepare", new exec_all_prepare());
      processMap.put("exec_sql", new exec_sql());
      processMap.put("exec_sql_prepare", new exec_sql_prepare());
      return processMap;
    }

    public static class protocolVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, protocolVersion_args, String> {
      public protocolVersion() {
        super("protocolVersion");
      }

      public protocolVersion_args getEmptyArgsInstance() {
        return new protocolVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            protocolVersion_result result = new protocolVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            protocolVersion_result result = new protocolVersion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, protocolVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.protocolVersion(resultHandler);
      }
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, LoginResult> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public AsyncMethodCallback<LoginResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoginResult>() { 
          public void onComplete(LoginResult o) {
            login_result result = new login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            login_result result = new login_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<LoginResult> resultHandler) throws TException {
        iface.login(args.username, args.password,resultHandler);
      }
    }

    public static class initialize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initialize_args, String> {
      public initialize() {
        super("initialize");
      }

      public initialize_args getEmptyArgsInstance() {
        return new initialize_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            initialize_result result = new initialize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initialize_result result = new initialize_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initialize_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.initialize(args.servers,resultHandler);
      }
    }

    public static class exec_single<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_single_args, Result> {
      public exec_single() {
        super("exec_single");
      }

      public exec_single_args getEmptyArgsInstance() {
        return new exec_single_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_single_result result = new exec_single_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_single_result result = new exec_single_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_single_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_single(args.actorname, args.actortype, args.sql, args.flags,resultHandler);
      }
    }

    public static class exec_single_prepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_single_prepare_args, Result> {
      public exec_single_prepare() {
        super("exec_single_prepare");
      }

      public exec_single_prepare_args getEmptyArgsInstance() {
        return new exec_single_prepare_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_single_prepare_result result = new exec_single_prepare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_single_prepare_result result = new exec_single_prepare_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_single_prepare_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_single_prepare(args.actorname, args.actortype, args.sql, args.flags, args.bindingvals,resultHandler);
      }
    }

    public static class exec_multi<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_multi_args, Result> {
      public exec_multi() {
        super("exec_multi");
      }

      public exec_multi_args getEmptyArgsInstance() {
        return new exec_multi_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_multi_result result = new exec_multi_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_multi_result result = new exec_multi_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_multi_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_multi(args.actors, args.actortype, args.sql, args.flags,resultHandler);
      }
    }

    public static class exec_multi_prepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_multi_prepare_args, Result> {
      public exec_multi_prepare() {
        super("exec_multi_prepare");
      }

      public exec_multi_prepare_args getEmptyArgsInstance() {
        return new exec_multi_prepare_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_multi_prepare_result result = new exec_multi_prepare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_multi_prepare_result result = new exec_multi_prepare_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_multi_prepare_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_multi_prepare(args.actors, args.actortype, args.sql, args.flags, args.bindingvals,resultHandler);
      }
    }

    public static class exec_all<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_all_args, Result> {
      public exec_all() {
        super("exec_all");
      }

      public exec_all_args getEmptyArgsInstance() {
        return new exec_all_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_all_result result = new exec_all_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_all_result result = new exec_all_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_all_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_all(args.actortype, args.sql, args.flags,resultHandler);
      }
    }

    public static class exec_all_prepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_all_prepare_args, Result> {
      public exec_all_prepare() {
        super("exec_all_prepare");
      }

      public exec_all_prepare_args getEmptyArgsInstance() {
        return new exec_all_prepare_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_all_prepare_result result = new exec_all_prepare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_all_prepare_result result = new exec_all_prepare_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_all_prepare_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_all_prepare(args.actortype, args.sql, args.flags, args.bindingvals,resultHandler);
      }
    }

    public static class exec_sql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_sql_args, Result> {
      public exec_sql() {
        super("exec_sql");
      }

      public exec_sql_args getEmptyArgsInstance() {
        return new exec_sql_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_sql_result result = new exec_sql_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_sql_result result = new exec_sql_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_sql_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_sql(args.sql,resultHandler);
      }
    }

    public static class exec_sql_prepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_sql_prepare_args, Result> {
      public exec_sql_prepare() {
        super("exec_sql_prepare");
      }

      public exec_sql_prepare_args getEmptyArgsInstance() {
        return new exec_sql_prepare_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exec_sql_prepare_result result = new exec_sql_prepare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_sql_prepare_result result = new exec_sql_prepare_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_sql_prepare_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exec_sql_prepare(args.sql, args.bindingvals,resultHandler);
      }
    }

  }

  public static class protocolVersion_args implements org.apache.thrift.TBase<protocolVersion_args, protocolVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<protocolVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("protocolVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new protocolVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new protocolVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(protocolVersion_args.class, metaDataMap);
    }

    public protocolVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public protocolVersion_args(protocolVersion_args other) {
    }

    public protocolVersion_args deepCopy() {
      return new protocolVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof protocolVersion_args)
        return this.equals((protocolVersion_args)that);
      return false;
    }

    public boolean equals(protocolVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(protocolVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("protocolVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class protocolVersion_argsStandardSchemeFactory implements SchemeFactory {
      public protocolVersion_argsStandardScheme getScheme() {
        return new protocolVersion_argsStandardScheme();
      }
    }

    private static class protocolVersion_argsStandardScheme extends StandardScheme<protocolVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, protocolVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, protocolVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class protocolVersion_argsTupleSchemeFactory implements SchemeFactory {
      public protocolVersion_argsTupleScheme getScheme() {
        return new protocolVersion_argsTupleScheme();
      }
    }

    private static class protocolVersion_argsTupleScheme extends TupleScheme<protocolVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, protocolVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, protocolVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class protocolVersion_result implements org.apache.thrift.TBase<protocolVersion_result, protocolVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<protocolVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("protocolVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new protocolVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new protocolVersion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(protocolVersion_result.class, metaDataMap);
    }

    public protocolVersion_result() {
    }

    public protocolVersion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public protocolVersion_result(protocolVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public protocolVersion_result deepCopy() {
      return new protocolVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public protocolVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof protocolVersion_result)
        return this.equals((protocolVersion_result)that);
      return false;
    }

    public boolean equals(protocolVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(protocolVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("protocolVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class protocolVersion_resultStandardSchemeFactory implements SchemeFactory {
      public protocolVersion_resultStandardScheme getScheme() {
        return new protocolVersion_resultStandardScheme();
      }
    }

    private static class protocolVersion_resultStandardScheme extends StandardScheme<protocolVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, protocolVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, protocolVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class protocolVersion_resultTupleSchemeFactory implements SchemeFactory {
      public protocolVersion_resultTupleScheme getScheme() {
        return new protocolVersion_resultTupleScheme();
      }
    }

    private static class protocolVersion_resultTupleScheme extends TupleScheme<protocolVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, protocolVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, protocolVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
    }

    public String username; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      String username,
      String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public String getUsername() {
      return this.username;
    }

    public login_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public login_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (username == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.password);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }

  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
    }

    public LoginResult success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginResult.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      LoginResult success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public LoginResult getSuccess() {
      return this.success;
    }

    public login_result setSuccess(LoginResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public login_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoginResult)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoginResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new LoginResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class initialize_args implements org.apache.thrift.TBase<initialize_args, initialize_args._Fields>, java.io.Serializable, Cloneable, Comparable<initialize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initialize_args");

    private static final org.apache.thrift.protocol.TField SERVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("servers", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initialize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initialize_argsTupleSchemeFactory());
    }

    public Server servers; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVERS((short)1, "servers");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVERS
            return SERVERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVERS, new org.apache.thrift.meta_data.FieldMetaData("servers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Server.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initialize_args.class, metaDataMap);
    }

    public initialize_args() {
    }

    public initialize_args(
      Server servers)
    {
      this();
      this.servers = servers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initialize_args(initialize_args other) {
      if (other.isSetServers()) {
        this.servers = new Server(other.servers);
      }
    }

    public initialize_args deepCopy() {
      return new initialize_args(this);
    }

    @Override
    public void clear() {
      this.servers = null;
    }

    public Server getServers() {
      return this.servers;
    }

    public initialize_args setServers(Server servers) {
      this.servers = servers;
      return this;
    }

    public void unsetServers() {
      this.servers = null;
    }

    /** Returns true if field servers is set (has been assigned a value) and false otherwise */
    public boolean isSetServers() {
      return this.servers != null;
    }

    public void setServersIsSet(boolean value) {
      if (!value) {
        this.servers = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVERS:
        if (value == null) {
          unsetServers();
        } else {
          setServers((Server)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVERS:
        return getServers();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVERS:
        return isSetServers();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initialize_args)
        return this.equals((initialize_args)that);
      return false;
    }

    public boolean equals(initialize_args that) {
      if (that == null)
        return false;

      boolean this_present_servers = true && this.isSetServers();
      boolean that_present_servers = true && that.isSetServers();
      if (this_present_servers || that_present_servers) {
        if (!(this_present_servers && that_present_servers))
          return false;
        if (!this.servers.equals(that.servers))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_servers = true && (isSetServers());
      list.add(present_servers);
      if (present_servers)
        list.add(servers);

      return list.hashCode();
    }

    @Override
    public int compareTo(initialize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServers()).compareTo(other.isSetServers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.servers, other.servers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initialize_args(");
      boolean first = true;

      sb.append("servers:");
      if (this.servers == null) {
        sb.append("null");
      } else {
        sb.append(this.servers);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (servers != null) {
        servers.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initialize_argsStandardSchemeFactory implements SchemeFactory {
      public initialize_argsStandardScheme getScheme() {
        return new initialize_argsStandardScheme();
      }
    }

    private static class initialize_argsStandardScheme extends StandardScheme<initialize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initialize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.servers = new Server();
                struct.servers.read(iprot);
                struct.setServersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initialize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.servers != null) {
          oprot.writeFieldBegin(SERVERS_FIELD_DESC);
          struct.servers.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initialize_argsTupleSchemeFactory implements SchemeFactory {
      public initialize_argsTupleScheme getScheme() {
        return new initialize_argsTupleScheme();
      }
    }

    private static class initialize_argsTupleScheme extends TupleScheme<initialize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initialize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServers()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServers()) {
          struct.servers.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initialize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.servers = new Server();
          struct.servers.read(iprot);
          struct.setServersIsSet(true);
        }
      }
    }

  }

  public static class initialize_result implements org.apache.thrift.TBase<initialize_result, initialize_result._Fields>, java.io.Serializable, Cloneable, Comparable<initialize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initialize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initialize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initialize_resultTupleSchemeFactory());
    }

    public String success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initialize_result.class, metaDataMap);
    }

    public initialize_result() {
    }

    public initialize_result(
      String success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initialize_result(initialize_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public initialize_result deepCopy() {
      return new initialize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public initialize_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public initialize_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initialize_result)
        return this.equals((initialize_result)that);
      return false;
    }

    public boolean equals(initialize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(initialize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initialize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initialize_resultStandardSchemeFactory implements SchemeFactory {
      public initialize_resultStandardScheme getScheme() {
        return new initialize_resultStandardScheme();
      }
    }

    private static class initialize_resultStandardScheme extends StandardScheme<initialize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initialize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initialize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initialize_resultTupleSchemeFactory implements SchemeFactory {
      public initialize_resultTupleScheme getScheme() {
        return new initialize_resultTupleScheme();
      }
    }

    private static class initialize_resultTupleScheme extends TupleScheme<initialize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initialize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initialize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_single_args implements org.apache.thrift.TBase<exec_single_args, exec_single_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_single_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_single_args");

    private static final org.apache.thrift.protocol.TField ACTORNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("actorname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTORTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actortype", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_single_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_single_argsTupleSchemeFactory());
    }

    public String actorname; // required
    public String actortype; // required
    public String sql; // required
    public List<String> flags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTORNAME((short)1, "actorname"),
      ACTORTYPE((short)2, "actortype"),
      SQL((short)3, "sql"),
      FLAGS((short)4, "flags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTORNAME
            return ACTORNAME;
          case 2: // ACTORTYPE
            return ACTORTYPE;
          case 3: // SQL
            return SQL;
          case 4: // FLAGS
            return FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTORNAME, new org.apache.thrift.meta_data.FieldMetaData("actorname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTORTYPE, new org.apache.thrift.meta_data.FieldMetaData("actortype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_single_args.class, metaDataMap);
    }

    public exec_single_args() {
      this.flags = new ArrayList<String>();

    }

    public exec_single_args(
      String actorname,
      String actortype,
      String sql,
      List<String> flags)
    {
      this();
      this.actorname = actorname;
      this.actortype = actortype;
      this.sql = sql;
      this.flags = flags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_single_args(exec_single_args other) {
      if (other.isSetActorname()) {
        this.actorname = other.actorname;
      }
      if (other.isSetActortype()) {
        this.actortype = other.actortype;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetFlags()) {
        List<String> __this__flags = new ArrayList<String>(other.flags);
        this.flags = __this__flags;
      }
    }

    public exec_single_args deepCopy() {
      return new exec_single_args(this);
    }

    @Override
    public void clear() {
      this.actorname = null;
      this.actortype = null;
      this.sql = null;
      this.flags = new ArrayList<String>();

    }

    public String getActorname() {
      return this.actorname;
    }

    public exec_single_args setActorname(String actorname) {
      this.actorname = actorname;
      return this;
    }

    public void unsetActorname() {
      this.actorname = null;
    }

    /** Returns true if field actorname is set (has been assigned a value) and false otherwise */
    public boolean isSetActorname() {
      return this.actorname != null;
    }

    public void setActornameIsSet(boolean value) {
      if (!value) {
        this.actorname = null;
      }
    }

    public String getActortype() {
      return this.actortype;
    }

    public exec_single_args setActortype(String actortype) {
      this.actortype = actortype;
      return this;
    }

    public void unsetActortype() {
      this.actortype = null;
    }

    /** Returns true if field actortype is set (has been assigned a value) and false otherwise */
    public boolean isSetActortype() {
      return this.actortype != null;
    }

    public void setActortypeIsSet(boolean value) {
      if (!value) {
        this.actortype = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public exec_single_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getFlagsSize() {
      return (this.flags == null) ? 0 : this.flags.size();
    }

    public java.util.Iterator<String> getFlagsIterator() {
      return (this.flags == null) ? null : this.flags.iterator();
    }

    public void addToFlags(String elem) {
      if (this.flags == null) {
        this.flags = new ArrayList<String>();
      }
      this.flags.add(elem);
    }

    public List<String> getFlags() {
      return this.flags;
    }

    public exec_single_args setFlags(List<String> flags) {
      this.flags = flags;
      return this;
    }

    public void unsetFlags() {
      this.flags = null;
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return this.flags != null;
    }

    public void setFlagsIsSet(boolean value) {
      if (!value) {
        this.flags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTORNAME:
        if (value == null) {
          unsetActorname();
        } else {
          setActorname((String)value);
        }
        break;

      case ACTORTYPE:
        if (value == null) {
          unsetActortype();
        } else {
          setActortype((String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTORNAME:
        return getActorname();

      case ACTORTYPE:
        return getActortype();

      case SQL:
        return getSql();

      case FLAGS:
        return getFlags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTORNAME:
        return isSetActorname();
      case ACTORTYPE:
        return isSetActortype();
      case SQL:
        return isSetSql();
      case FLAGS:
        return isSetFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_single_args)
        return this.equals((exec_single_args)that);
      return false;
    }

    public boolean equals(exec_single_args that) {
      if (that == null)
        return false;

      boolean this_present_actorname = true && this.isSetActorname();
      boolean that_present_actorname = true && that.isSetActorname();
      if (this_present_actorname || that_present_actorname) {
        if (!(this_present_actorname && that_present_actorname))
          return false;
        if (!this.actorname.equals(that.actorname))
          return false;
      }

      boolean this_present_actortype = true && this.isSetActortype();
      boolean that_present_actortype = true && that.isSetActortype();
      if (this_present_actortype || that_present_actortype) {
        if (!(this_present_actortype && that_present_actortype))
          return false;
        if (!this.actortype.equals(that.actortype))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_flags = true && this.isSetFlags();
      boolean that_present_flags = true && that.isSetFlags();
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (!this.flags.equals(that.flags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_actorname = true && (isSetActorname());
      list.add(present_actorname);
      if (present_actorname)
        list.add(actorname);

      boolean present_actortype = true && (isSetActortype());
      list.add(present_actortype);
      if (present_actortype)
        list.add(actortype);

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      boolean present_flags = true && (isSetFlags());
      list.add(present_flags);
      if (present_flags)
        list.add(flags);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_single_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActorname()).compareTo(other.isSetActorname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActorname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorname, other.actorname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActortype()).compareTo(other.isSetActortype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActortype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actortype, other.actortype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_single_args(");
      boolean first = true;

      sb.append("actorname:");
      if (this.actorname == null) {
        sb.append("null");
      } else {
        sb.append(this.actorname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actortype:");
      if (this.actortype == null) {
        sb.append("null");
      } else {
        sb.append(this.actortype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (actorname == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actorname' was not present! Struct: " + toString());
      }
      if (actortype == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actortype' was not present! Struct: " + toString());
      }
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_single_argsStandardSchemeFactory implements SchemeFactory {
      public exec_single_argsStandardScheme getScheme() {
        return new exec_single_argsStandardScheme();
      }
    }

    private static class exec_single_argsStandardScheme extends StandardScheme<exec_single_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_single_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTORNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actorname = iprot.readString();
                struct.setActornameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTORTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actortype = iprot.readString();
                struct.setActortypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.flags = new ArrayList<String>(_list66.size);
                  String _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = iprot.readString();
                    struct.flags.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_single_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.actorname != null) {
          oprot.writeFieldBegin(ACTORNAME_FIELD_DESC);
          oprot.writeString(struct.actorname);
          oprot.writeFieldEnd();
        }
        if (struct.actortype != null) {
          oprot.writeFieldBegin(ACTORTYPE_FIELD_DESC);
          oprot.writeString(struct.actortype);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.flags != null) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.flags.size()));
            for (String _iter69 : struct.flags)
            {
              oprot.writeString(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_single_argsTupleSchemeFactory implements SchemeFactory {
      public exec_single_argsTupleScheme getScheme() {
        return new exec_single_argsTupleScheme();
      }
    }

    private static class exec_single_argsTupleScheme extends TupleScheme<exec_single_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_single_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.actorname);
        oprot.writeString(struct.actortype);
        oprot.writeString(struct.sql);
        BitSet optionals = new BitSet();
        if (struct.isSetFlags()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFlags()) {
          {
            oprot.writeI32(struct.flags.size());
            for (String _iter70 : struct.flags)
            {
              oprot.writeString(_iter70);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_single_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.actorname = iprot.readString();
        struct.setActornameIsSet(true);
        struct.actortype = iprot.readString();
        struct.setActortypeIsSet(true);
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.flags = new ArrayList<String>(_list71.size);
            String _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readString();
              struct.flags.add(_elem72);
            }
          }
          struct.setFlagsIsSet(true);
        }
      }
    }

  }

  public static class exec_single_result implements org.apache.thrift.TBase<exec_single_result, exec_single_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_single_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_single_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_single_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_single_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_single_result.class, metaDataMap);
    }

    public exec_single_result() {
    }

    public exec_single_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_single_result(exec_single_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_single_result deepCopy() {
      return new exec_single_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_single_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_single_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_single_result)
        return this.equals((exec_single_result)that);
      return false;
    }

    public boolean equals(exec_single_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_single_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_single_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_single_resultStandardSchemeFactory implements SchemeFactory {
      public exec_single_resultStandardScheme getScheme() {
        return new exec_single_resultStandardScheme();
      }
    }

    private static class exec_single_resultStandardScheme extends StandardScheme<exec_single_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_single_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_single_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_single_resultTupleSchemeFactory implements SchemeFactory {
      public exec_single_resultTupleScheme getScheme() {
        return new exec_single_resultTupleScheme();
      }
    }

    private static class exec_single_resultTupleScheme extends TupleScheme<exec_single_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_single_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_single_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_single_prepare_args implements org.apache.thrift.TBase<exec_single_prepare_args, exec_single_prepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_single_prepare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_single_prepare_args");

    private static final org.apache.thrift.protocol.TField ACTORNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("actorname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTORTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actortype", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField BINDINGVALS_FIELD_DESC = new org.apache.thrift.protocol.TField("bindingvals", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_single_prepare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_single_prepare_argsTupleSchemeFactory());
    }

    public String actorname; // required
    public String actortype; // required
    public String sql; // required
    public List<String> flags; // required
    public List<List<Val>> bindingvals; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTORNAME((short)1, "actorname"),
      ACTORTYPE((short)2, "actortype"),
      SQL((short)3, "sql"),
      FLAGS((short)4, "flags"),
      BINDINGVALS((short)5, "bindingvals");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTORNAME
            return ACTORNAME;
          case 2: // ACTORTYPE
            return ACTORTYPE;
          case 3: // SQL
            return SQL;
          case 4: // FLAGS
            return FLAGS;
          case 5: // BINDINGVALS
            return BINDINGVALS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTORNAME, new org.apache.thrift.meta_data.FieldMetaData("actorname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTORTYPE, new org.apache.thrift.meta_data.FieldMetaData("actortype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BINDINGVALS, new org.apache.thrift.meta_data.FieldMetaData("bindingvals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Val.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_single_prepare_args.class, metaDataMap);
    }

    public exec_single_prepare_args() {
      this.flags = new ArrayList<String>();

      this.bindingvals = new ArrayList<List<Val>>();

    }

    public exec_single_prepare_args(
      String actorname,
      String actortype,
      String sql,
      List<String> flags,
      List<List<Val>> bindingvals)
    {
      this();
      this.actorname = actorname;
      this.actortype = actortype;
      this.sql = sql;
      this.flags = flags;
      this.bindingvals = bindingvals;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_single_prepare_args(exec_single_prepare_args other) {
      if (other.isSetActorname()) {
        this.actorname = other.actorname;
      }
      if (other.isSetActortype()) {
        this.actortype = other.actortype;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetFlags()) {
        List<String> __this__flags = new ArrayList<String>(other.flags);
        this.flags = __this__flags;
      }
      if (other.isSetBindingvals()) {
        List<List<Val>> __this__bindingvals = new ArrayList<List<Val>>(other.bindingvals.size());
        for (List<Val> other_element : other.bindingvals) {
          List<Val> __this__bindingvals_copy = new ArrayList<Val>(other_element.size());
          for (Val other_element_element : other_element) {
            __this__bindingvals_copy.add(new Val(other_element_element));
          }
          __this__bindingvals.add(__this__bindingvals_copy);
        }
        this.bindingvals = __this__bindingvals;
      }
    }

    public exec_single_prepare_args deepCopy() {
      return new exec_single_prepare_args(this);
    }

    @Override
    public void clear() {
      this.actorname = null;
      this.actortype = null;
      this.sql = null;
      this.flags = new ArrayList<String>();

      this.bindingvals = new ArrayList<List<Val>>();

    }

    public String getActorname() {
      return this.actorname;
    }

    public exec_single_prepare_args setActorname(String actorname) {
      this.actorname = actorname;
      return this;
    }

    public void unsetActorname() {
      this.actorname = null;
    }

    /** Returns true if field actorname is set (has been assigned a value) and false otherwise */
    public boolean isSetActorname() {
      return this.actorname != null;
    }

    public void setActornameIsSet(boolean value) {
      if (!value) {
        this.actorname = null;
      }
    }

    public String getActortype() {
      return this.actortype;
    }

    public exec_single_prepare_args setActortype(String actortype) {
      this.actortype = actortype;
      return this;
    }

    public void unsetActortype() {
      this.actortype = null;
    }

    /** Returns true if field actortype is set (has been assigned a value) and false otherwise */
    public boolean isSetActortype() {
      return this.actortype != null;
    }

    public void setActortypeIsSet(boolean value) {
      if (!value) {
        this.actortype = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public exec_single_prepare_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getFlagsSize() {
      return (this.flags == null) ? 0 : this.flags.size();
    }

    public java.util.Iterator<String> getFlagsIterator() {
      return (this.flags == null) ? null : this.flags.iterator();
    }

    public void addToFlags(String elem) {
      if (this.flags == null) {
        this.flags = new ArrayList<String>();
      }
      this.flags.add(elem);
    }

    public List<String> getFlags() {
      return this.flags;
    }

    public exec_single_prepare_args setFlags(List<String> flags) {
      this.flags = flags;
      return this;
    }

    public void unsetFlags() {
      this.flags = null;
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return this.flags != null;
    }

    public void setFlagsIsSet(boolean value) {
      if (!value) {
        this.flags = null;
      }
    }

    public int getBindingvalsSize() {
      return (this.bindingvals == null) ? 0 : this.bindingvals.size();
    }

    public java.util.Iterator<List<Val>> getBindingvalsIterator() {
      return (this.bindingvals == null) ? null : this.bindingvals.iterator();
    }

    public void addToBindingvals(List<Val> elem) {
      if (this.bindingvals == null) {
        this.bindingvals = new ArrayList<List<Val>>();
      }
      this.bindingvals.add(elem);
    }

    public List<List<Val>> getBindingvals() {
      return this.bindingvals;
    }

    public exec_single_prepare_args setBindingvals(List<List<Val>> bindingvals) {
      this.bindingvals = bindingvals;
      return this;
    }

    public void unsetBindingvals() {
      this.bindingvals = null;
    }

    /** Returns true if field bindingvals is set (has been assigned a value) and false otherwise */
    public boolean isSetBindingvals() {
      return this.bindingvals != null;
    }

    public void setBindingvalsIsSet(boolean value) {
      if (!value) {
        this.bindingvals = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTORNAME:
        if (value == null) {
          unsetActorname();
        } else {
          setActorname((String)value);
        }
        break;

      case ACTORTYPE:
        if (value == null) {
          unsetActortype();
        } else {
          setActortype((String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((List<String>)value);
        }
        break;

      case BINDINGVALS:
        if (value == null) {
          unsetBindingvals();
        } else {
          setBindingvals((List<List<Val>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTORNAME:
        return getActorname();

      case ACTORTYPE:
        return getActortype();

      case SQL:
        return getSql();

      case FLAGS:
        return getFlags();

      case BINDINGVALS:
        return getBindingvals();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTORNAME:
        return isSetActorname();
      case ACTORTYPE:
        return isSetActortype();
      case SQL:
        return isSetSql();
      case FLAGS:
        return isSetFlags();
      case BINDINGVALS:
        return isSetBindingvals();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_single_prepare_args)
        return this.equals((exec_single_prepare_args)that);
      return false;
    }

    public boolean equals(exec_single_prepare_args that) {
      if (that == null)
        return false;

      boolean this_present_actorname = true && this.isSetActorname();
      boolean that_present_actorname = true && that.isSetActorname();
      if (this_present_actorname || that_present_actorname) {
        if (!(this_present_actorname && that_present_actorname))
          return false;
        if (!this.actorname.equals(that.actorname))
          return false;
      }

      boolean this_present_actortype = true && this.isSetActortype();
      boolean that_present_actortype = true && that.isSetActortype();
      if (this_present_actortype || that_present_actortype) {
        if (!(this_present_actortype && that_present_actortype))
          return false;
        if (!this.actortype.equals(that.actortype))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_flags = true && this.isSetFlags();
      boolean that_present_flags = true && that.isSetFlags();
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (!this.flags.equals(that.flags))
          return false;
      }

      boolean this_present_bindingvals = true && this.isSetBindingvals();
      boolean that_present_bindingvals = true && that.isSetBindingvals();
      if (this_present_bindingvals || that_present_bindingvals) {
        if (!(this_present_bindingvals && that_present_bindingvals))
          return false;
        if (!this.bindingvals.equals(that.bindingvals))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_actorname = true && (isSetActorname());
      list.add(present_actorname);
      if (present_actorname)
        list.add(actorname);

      boolean present_actortype = true && (isSetActortype());
      list.add(present_actortype);
      if (present_actortype)
        list.add(actortype);

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      boolean present_flags = true && (isSetFlags());
      list.add(present_flags);
      if (present_flags)
        list.add(flags);

      boolean present_bindingvals = true && (isSetBindingvals());
      list.add(present_bindingvals);
      if (present_bindingvals)
        list.add(bindingvals);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_single_prepare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActorname()).compareTo(other.isSetActorname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActorname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorname, other.actorname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActortype()).compareTo(other.isSetActortype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActortype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actortype, other.actortype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBindingvals()).compareTo(other.isSetBindingvals());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindingvals()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindingvals, other.bindingvals);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_single_prepare_args(");
      boolean first = true;

      sb.append("actorname:");
      if (this.actorname == null) {
        sb.append("null");
      } else {
        sb.append(this.actorname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actortype:");
      if (this.actortype == null) {
        sb.append("null");
      } else {
        sb.append(this.actortype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bindingvals:");
      if (this.bindingvals == null) {
        sb.append("null");
      } else {
        sb.append(this.bindingvals);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (actorname == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actorname' was not present! Struct: " + toString());
      }
      if (actortype == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actortype' was not present! Struct: " + toString());
      }
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_single_prepare_argsStandardSchemeFactory implements SchemeFactory {
      public exec_single_prepare_argsStandardScheme getScheme() {
        return new exec_single_prepare_argsStandardScheme();
      }
    }

    private static class exec_single_prepare_argsStandardScheme extends StandardScheme<exec_single_prepare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_single_prepare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTORNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actorname = iprot.readString();
                struct.setActornameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTORTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actortype = iprot.readString();
                struct.setActortypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.flags = new ArrayList<String>(_list74.size);
                  String _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = iprot.readString();
                    struct.flags.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BINDINGVALS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                  struct.bindingvals = new ArrayList<List<Val>>(_list77.size);
                  List<Val> _elem78;
                  for (int _i79 = 0; _i79 < _list77.size; ++_i79)
                  {
                    {
                      org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                      _elem78 = new ArrayList<Val>(_list80.size);
                      Val _elem81;
                      for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                      {
                        _elem81 = new Val();
                        _elem81.read(iprot);
                        _elem78.add(_elem81);
                      }
                      iprot.readListEnd();
                    }
                    struct.bindingvals.add(_elem78);
                  }
                  iprot.readListEnd();
                }
                struct.setBindingvalsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_single_prepare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.actorname != null) {
          oprot.writeFieldBegin(ACTORNAME_FIELD_DESC);
          oprot.writeString(struct.actorname);
          oprot.writeFieldEnd();
        }
        if (struct.actortype != null) {
          oprot.writeFieldBegin(ACTORTYPE_FIELD_DESC);
          oprot.writeString(struct.actortype);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.flags != null) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.flags.size()));
            for (String _iter83 : struct.flags)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bindingvals != null) {
          oprot.writeFieldBegin(BINDINGVALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.bindingvals.size()));
            for (List<Val> _iter84 : struct.bindingvals)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter84.size()));
                for (Val _iter85 : _iter84)
                {
                  _iter85.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_single_prepare_argsTupleSchemeFactory implements SchemeFactory {
      public exec_single_prepare_argsTupleScheme getScheme() {
        return new exec_single_prepare_argsTupleScheme();
      }
    }

    private static class exec_single_prepare_argsTupleScheme extends TupleScheme<exec_single_prepare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_single_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.actorname);
        oprot.writeString(struct.actortype);
        oprot.writeString(struct.sql);
        BitSet optionals = new BitSet();
        if (struct.isSetFlags()) {
          optionals.set(0);
        }
        if (struct.isSetBindingvals()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFlags()) {
          {
            oprot.writeI32(struct.flags.size());
            for (String _iter86 : struct.flags)
            {
              oprot.writeString(_iter86);
            }
          }
        }
        if (struct.isSetBindingvals()) {
          {
            oprot.writeI32(struct.bindingvals.size());
            for (List<Val> _iter87 : struct.bindingvals)
            {
              {
                oprot.writeI32(_iter87.size());
                for (Val _iter88 : _iter87)
                {
                  _iter88.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_single_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.actorname = iprot.readString();
        struct.setActornameIsSet(true);
        struct.actortype = iprot.readString();
        struct.setActortypeIsSet(true);
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.flags = new ArrayList<String>(_list89.size);
            String _elem90;
            for (int _i91 = 0; _i91 < _list89.size; ++_i91)
            {
              _elem90 = iprot.readString();
              struct.flags.add(_elem90);
            }
          }
          struct.setFlagsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.bindingvals = new ArrayList<List<Val>>(_list92.size);
            List<Val> _elem93;
            for (int _i94 = 0; _i94 < _list92.size; ++_i94)
            {
              {
                org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem93 = new ArrayList<Val>(_list95.size);
                Val _elem96;
                for (int _i97 = 0; _i97 < _list95.size; ++_i97)
                {
                  _elem96 = new Val();
                  _elem96.read(iprot);
                  _elem93.add(_elem96);
                }
              }
              struct.bindingvals.add(_elem93);
            }
          }
          struct.setBindingvalsIsSet(true);
        }
      }
    }

  }

  public static class exec_single_prepare_result implements org.apache.thrift.TBase<exec_single_prepare_result, exec_single_prepare_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_single_prepare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_single_prepare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_single_prepare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_single_prepare_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_single_prepare_result.class, metaDataMap);
    }

    public exec_single_prepare_result() {
    }

    public exec_single_prepare_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_single_prepare_result(exec_single_prepare_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_single_prepare_result deepCopy() {
      return new exec_single_prepare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_single_prepare_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_single_prepare_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_single_prepare_result)
        return this.equals((exec_single_prepare_result)that);
      return false;
    }

    public boolean equals(exec_single_prepare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_single_prepare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_single_prepare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_single_prepare_resultStandardSchemeFactory implements SchemeFactory {
      public exec_single_prepare_resultStandardScheme getScheme() {
        return new exec_single_prepare_resultStandardScheme();
      }
    }

    private static class exec_single_prepare_resultStandardScheme extends StandardScheme<exec_single_prepare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_single_prepare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_single_prepare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_single_prepare_resultTupleSchemeFactory implements SchemeFactory {
      public exec_single_prepare_resultTupleScheme getScheme() {
        return new exec_single_prepare_resultTupleScheme();
      }
    }

    private static class exec_single_prepare_resultTupleScheme extends TupleScheme<exec_single_prepare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_single_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_single_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_multi_args implements org.apache.thrift.TBase<exec_multi_args, exec_multi_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_multi_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_multi_args");

    private static final org.apache.thrift.protocol.TField ACTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("actors", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ACTORTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actortype", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_multi_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_multi_argsTupleSchemeFactory());
    }

    public List<String> actors; // required
    public String actortype; // required
    public String sql; // required
    public List<String> flags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTORS((short)1, "actors"),
      ACTORTYPE((short)2, "actortype"),
      SQL((short)3, "sql"),
      FLAGS((short)4, "flags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTORS
            return ACTORS;
          case 2: // ACTORTYPE
            return ACTORTYPE;
          case 3: // SQL
            return SQL;
          case 4: // FLAGS
            return FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTORS, new org.apache.thrift.meta_data.FieldMetaData("actors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ACTORTYPE, new org.apache.thrift.meta_data.FieldMetaData("actortype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_multi_args.class, metaDataMap);
    }

    public exec_multi_args() {
      this.flags = new ArrayList<String>();

    }

    public exec_multi_args(
      List<String> actors,
      String actortype,
      String sql,
      List<String> flags)
    {
      this();
      this.actors = actors;
      this.actortype = actortype;
      this.sql = sql;
      this.flags = flags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_multi_args(exec_multi_args other) {
      if (other.isSetActors()) {
        List<String> __this__actors = new ArrayList<String>(other.actors);
        this.actors = __this__actors;
      }
      if (other.isSetActortype()) {
        this.actortype = other.actortype;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetFlags()) {
        List<String> __this__flags = new ArrayList<String>(other.flags);
        this.flags = __this__flags;
      }
    }

    public exec_multi_args deepCopy() {
      return new exec_multi_args(this);
    }

    @Override
    public void clear() {
      this.actors = null;
      this.actortype = null;
      this.sql = null;
      this.flags = new ArrayList<String>();

    }

    public int getActorsSize() {
      return (this.actors == null) ? 0 : this.actors.size();
    }

    public java.util.Iterator<String> getActorsIterator() {
      return (this.actors == null) ? null : this.actors.iterator();
    }

    public void addToActors(String elem) {
      if (this.actors == null) {
        this.actors = new ArrayList<String>();
      }
      this.actors.add(elem);
    }

    public List<String> getActors() {
      return this.actors;
    }

    public exec_multi_args setActors(List<String> actors) {
      this.actors = actors;
      return this;
    }

    public void unsetActors() {
      this.actors = null;
    }

    /** Returns true if field actors is set (has been assigned a value) and false otherwise */
    public boolean isSetActors() {
      return this.actors != null;
    }

    public void setActorsIsSet(boolean value) {
      if (!value) {
        this.actors = null;
      }
    }

    public String getActortype() {
      return this.actortype;
    }

    public exec_multi_args setActortype(String actortype) {
      this.actortype = actortype;
      return this;
    }

    public void unsetActortype() {
      this.actortype = null;
    }

    /** Returns true if field actortype is set (has been assigned a value) and false otherwise */
    public boolean isSetActortype() {
      return this.actortype != null;
    }

    public void setActortypeIsSet(boolean value) {
      if (!value) {
        this.actortype = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public exec_multi_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getFlagsSize() {
      return (this.flags == null) ? 0 : this.flags.size();
    }

    public java.util.Iterator<String> getFlagsIterator() {
      return (this.flags == null) ? null : this.flags.iterator();
    }

    public void addToFlags(String elem) {
      if (this.flags == null) {
        this.flags = new ArrayList<String>();
      }
      this.flags.add(elem);
    }

    public List<String> getFlags() {
      return this.flags;
    }

    public exec_multi_args setFlags(List<String> flags) {
      this.flags = flags;
      return this;
    }

    public void unsetFlags() {
      this.flags = null;
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return this.flags != null;
    }

    public void setFlagsIsSet(boolean value) {
      if (!value) {
        this.flags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTORS:
        if (value == null) {
          unsetActors();
        } else {
          setActors((List<String>)value);
        }
        break;

      case ACTORTYPE:
        if (value == null) {
          unsetActortype();
        } else {
          setActortype((String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTORS:
        return getActors();

      case ACTORTYPE:
        return getActortype();

      case SQL:
        return getSql();

      case FLAGS:
        return getFlags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTORS:
        return isSetActors();
      case ACTORTYPE:
        return isSetActortype();
      case SQL:
        return isSetSql();
      case FLAGS:
        return isSetFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_multi_args)
        return this.equals((exec_multi_args)that);
      return false;
    }

    public boolean equals(exec_multi_args that) {
      if (that == null)
        return false;

      boolean this_present_actors = true && this.isSetActors();
      boolean that_present_actors = true && that.isSetActors();
      if (this_present_actors || that_present_actors) {
        if (!(this_present_actors && that_present_actors))
          return false;
        if (!this.actors.equals(that.actors))
          return false;
      }

      boolean this_present_actortype = true && this.isSetActortype();
      boolean that_present_actortype = true && that.isSetActortype();
      if (this_present_actortype || that_present_actortype) {
        if (!(this_present_actortype && that_present_actortype))
          return false;
        if (!this.actortype.equals(that.actortype))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_flags = true && this.isSetFlags();
      boolean that_present_flags = true && that.isSetFlags();
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (!this.flags.equals(that.flags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_actors = true && (isSetActors());
      list.add(present_actors);
      if (present_actors)
        list.add(actors);

      boolean present_actortype = true && (isSetActortype());
      list.add(present_actortype);
      if (present_actortype)
        list.add(actortype);

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      boolean present_flags = true && (isSetFlags());
      list.add(present_flags);
      if (present_flags)
        list.add(flags);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_multi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActors()).compareTo(other.isSetActors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actors, other.actors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActortype()).compareTo(other.isSetActortype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActortype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actortype, other.actortype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_multi_args(");
      boolean first = true;

      sb.append("actors:");
      if (this.actors == null) {
        sb.append("null");
      } else {
        sb.append(this.actors);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actortype:");
      if (this.actortype == null) {
        sb.append("null");
      } else {
        sb.append(this.actortype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (actors == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actors' was not present! Struct: " + toString());
      }
      if (actortype == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actortype' was not present! Struct: " + toString());
      }
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_multi_argsStandardSchemeFactory implements SchemeFactory {
      public exec_multi_argsStandardScheme getScheme() {
        return new exec_multi_argsStandardScheme();
      }
    }

    private static class exec_multi_argsStandardScheme extends StandardScheme<exec_multi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_multi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTORS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.actors = new ArrayList<String>(_list98.size);
                  String _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = iprot.readString();
                    struct.actors.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setActorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTORTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actortype = iprot.readString();
                struct.setActortypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list101 = iprot.readListBegin();
                  struct.flags = new ArrayList<String>(_list101.size);
                  String _elem102;
                  for (int _i103 = 0; _i103 < _list101.size; ++_i103)
                  {
                    _elem102 = iprot.readString();
                    struct.flags.add(_elem102);
                  }
                  iprot.readListEnd();
                }
                struct.setFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_multi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.actors != null) {
          oprot.writeFieldBegin(ACTORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.actors.size()));
            for (String _iter104 : struct.actors)
            {
              oprot.writeString(_iter104);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.actortype != null) {
          oprot.writeFieldBegin(ACTORTYPE_FIELD_DESC);
          oprot.writeString(struct.actortype);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.flags != null) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.flags.size()));
            for (String _iter105 : struct.flags)
            {
              oprot.writeString(_iter105);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_multi_argsTupleSchemeFactory implements SchemeFactory {
      public exec_multi_argsTupleScheme getScheme() {
        return new exec_multi_argsTupleScheme();
      }
    }

    private static class exec_multi_argsTupleScheme extends TupleScheme<exec_multi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_multi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.actors.size());
          for (String _iter106 : struct.actors)
          {
            oprot.writeString(_iter106);
          }
        }
        oprot.writeString(struct.actortype);
        oprot.writeString(struct.sql);
        BitSet optionals = new BitSet();
        if (struct.isSetFlags()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFlags()) {
          {
            oprot.writeI32(struct.flags.size());
            for (String _iter107 : struct.flags)
            {
              oprot.writeString(_iter107);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_multi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list108 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.actors = new ArrayList<String>(_list108.size);
          String _elem109;
          for (int _i110 = 0; _i110 < _list108.size; ++_i110)
          {
            _elem109 = iprot.readString();
            struct.actors.add(_elem109);
          }
        }
        struct.setActorsIsSet(true);
        struct.actortype = iprot.readString();
        struct.setActortypeIsSet(true);
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.flags = new ArrayList<String>(_list111.size);
            String _elem112;
            for (int _i113 = 0; _i113 < _list111.size; ++_i113)
            {
              _elem112 = iprot.readString();
              struct.flags.add(_elem112);
            }
          }
          struct.setFlagsIsSet(true);
        }
      }
    }

  }

  public static class exec_multi_result implements org.apache.thrift.TBase<exec_multi_result, exec_multi_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_multi_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_multi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_multi_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_multi_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_multi_result.class, metaDataMap);
    }

    public exec_multi_result() {
    }

    public exec_multi_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_multi_result(exec_multi_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_multi_result deepCopy() {
      return new exec_multi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_multi_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_multi_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_multi_result)
        return this.equals((exec_multi_result)that);
      return false;
    }

    public boolean equals(exec_multi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_multi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_multi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_multi_resultStandardSchemeFactory implements SchemeFactory {
      public exec_multi_resultStandardScheme getScheme() {
        return new exec_multi_resultStandardScheme();
      }
    }

    private static class exec_multi_resultStandardScheme extends StandardScheme<exec_multi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_multi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_multi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_multi_resultTupleSchemeFactory implements SchemeFactory {
      public exec_multi_resultTupleScheme getScheme() {
        return new exec_multi_resultTupleScheme();
      }
    }

    private static class exec_multi_resultTupleScheme extends TupleScheme<exec_multi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_multi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_multi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_multi_prepare_args implements org.apache.thrift.TBase<exec_multi_prepare_args, exec_multi_prepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_multi_prepare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_multi_prepare_args");

    private static final org.apache.thrift.protocol.TField ACTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("actors", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ACTORTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actortype", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField BINDINGVALS_FIELD_DESC = new org.apache.thrift.protocol.TField("bindingvals", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_multi_prepare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_multi_prepare_argsTupleSchemeFactory());
    }

    public List<String> actors; // required
    public String actortype; // required
    public String sql; // required
    public List<String> flags; // required
    public List<List<Val>> bindingvals; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTORS((short)1, "actors"),
      ACTORTYPE((short)2, "actortype"),
      SQL((short)3, "sql"),
      FLAGS((short)4, "flags"),
      BINDINGVALS((short)5, "bindingvals");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTORS
            return ACTORS;
          case 2: // ACTORTYPE
            return ACTORTYPE;
          case 3: // SQL
            return SQL;
          case 4: // FLAGS
            return FLAGS;
          case 5: // BINDINGVALS
            return BINDINGVALS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTORS, new org.apache.thrift.meta_data.FieldMetaData("actors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ACTORTYPE, new org.apache.thrift.meta_data.FieldMetaData("actortype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BINDINGVALS, new org.apache.thrift.meta_data.FieldMetaData("bindingvals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Val.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_multi_prepare_args.class, metaDataMap);
    }

    public exec_multi_prepare_args() {
      this.flags = new ArrayList<String>();

      this.bindingvals = new ArrayList<List<Val>>();

    }

    public exec_multi_prepare_args(
      List<String> actors,
      String actortype,
      String sql,
      List<String> flags,
      List<List<Val>> bindingvals)
    {
      this();
      this.actors = actors;
      this.actortype = actortype;
      this.sql = sql;
      this.flags = flags;
      this.bindingvals = bindingvals;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_multi_prepare_args(exec_multi_prepare_args other) {
      if (other.isSetActors()) {
        List<String> __this__actors = new ArrayList<String>(other.actors);
        this.actors = __this__actors;
      }
      if (other.isSetActortype()) {
        this.actortype = other.actortype;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetFlags()) {
        List<String> __this__flags = new ArrayList<String>(other.flags);
        this.flags = __this__flags;
      }
      if (other.isSetBindingvals()) {
        List<List<Val>> __this__bindingvals = new ArrayList<List<Val>>(other.bindingvals.size());
        for (List<Val> other_element : other.bindingvals) {
          List<Val> __this__bindingvals_copy = new ArrayList<Val>(other_element.size());
          for (Val other_element_element : other_element) {
            __this__bindingvals_copy.add(new Val(other_element_element));
          }
          __this__bindingvals.add(__this__bindingvals_copy);
        }
        this.bindingvals = __this__bindingvals;
      }
    }

    public exec_multi_prepare_args deepCopy() {
      return new exec_multi_prepare_args(this);
    }

    @Override
    public void clear() {
      this.actors = null;
      this.actortype = null;
      this.sql = null;
      this.flags = new ArrayList<String>();

      this.bindingvals = new ArrayList<List<Val>>();

    }

    public int getActorsSize() {
      return (this.actors == null) ? 0 : this.actors.size();
    }

    public java.util.Iterator<String> getActorsIterator() {
      return (this.actors == null) ? null : this.actors.iterator();
    }

    public void addToActors(String elem) {
      if (this.actors == null) {
        this.actors = new ArrayList<String>();
      }
      this.actors.add(elem);
    }

    public List<String> getActors() {
      return this.actors;
    }

    public exec_multi_prepare_args setActors(List<String> actors) {
      this.actors = actors;
      return this;
    }

    public void unsetActors() {
      this.actors = null;
    }

    /** Returns true if field actors is set (has been assigned a value) and false otherwise */
    public boolean isSetActors() {
      return this.actors != null;
    }

    public void setActorsIsSet(boolean value) {
      if (!value) {
        this.actors = null;
      }
    }

    public String getActortype() {
      return this.actortype;
    }

    public exec_multi_prepare_args setActortype(String actortype) {
      this.actortype = actortype;
      return this;
    }

    public void unsetActortype() {
      this.actortype = null;
    }

    /** Returns true if field actortype is set (has been assigned a value) and false otherwise */
    public boolean isSetActortype() {
      return this.actortype != null;
    }

    public void setActortypeIsSet(boolean value) {
      if (!value) {
        this.actortype = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public exec_multi_prepare_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getFlagsSize() {
      return (this.flags == null) ? 0 : this.flags.size();
    }

    public java.util.Iterator<String> getFlagsIterator() {
      return (this.flags == null) ? null : this.flags.iterator();
    }

    public void addToFlags(String elem) {
      if (this.flags == null) {
        this.flags = new ArrayList<String>();
      }
      this.flags.add(elem);
    }

    public List<String> getFlags() {
      return this.flags;
    }

    public exec_multi_prepare_args setFlags(List<String> flags) {
      this.flags = flags;
      return this;
    }

    public void unsetFlags() {
      this.flags = null;
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return this.flags != null;
    }

    public void setFlagsIsSet(boolean value) {
      if (!value) {
        this.flags = null;
      }
    }

    public int getBindingvalsSize() {
      return (this.bindingvals == null) ? 0 : this.bindingvals.size();
    }

    public java.util.Iterator<List<Val>> getBindingvalsIterator() {
      return (this.bindingvals == null) ? null : this.bindingvals.iterator();
    }

    public void addToBindingvals(List<Val> elem) {
      if (this.bindingvals == null) {
        this.bindingvals = new ArrayList<List<Val>>();
      }
      this.bindingvals.add(elem);
    }

    public List<List<Val>> getBindingvals() {
      return this.bindingvals;
    }

    public exec_multi_prepare_args setBindingvals(List<List<Val>> bindingvals) {
      this.bindingvals = bindingvals;
      return this;
    }

    public void unsetBindingvals() {
      this.bindingvals = null;
    }

    /** Returns true if field bindingvals is set (has been assigned a value) and false otherwise */
    public boolean isSetBindingvals() {
      return this.bindingvals != null;
    }

    public void setBindingvalsIsSet(boolean value) {
      if (!value) {
        this.bindingvals = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTORS:
        if (value == null) {
          unsetActors();
        } else {
          setActors((List<String>)value);
        }
        break;

      case ACTORTYPE:
        if (value == null) {
          unsetActortype();
        } else {
          setActortype((String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((List<String>)value);
        }
        break;

      case BINDINGVALS:
        if (value == null) {
          unsetBindingvals();
        } else {
          setBindingvals((List<List<Val>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTORS:
        return getActors();

      case ACTORTYPE:
        return getActortype();

      case SQL:
        return getSql();

      case FLAGS:
        return getFlags();

      case BINDINGVALS:
        return getBindingvals();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTORS:
        return isSetActors();
      case ACTORTYPE:
        return isSetActortype();
      case SQL:
        return isSetSql();
      case FLAGS:
        return isSetFlags();
      case BINDINGVALS:
        return isSetBindingvals();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_multi_prepare_args)
        return this.equals((exec_multi_prepare_args)that);
      return false;
    }

    public boolean equals(exec_multi_prepare_args that) {
      if (that == null)
        return false;

      boolean this_present_actors = true && this.isSetActors();
      boolean that_present_actors = true && that.isSetActors();
      if (this_present_actors || that_present_actors) {
        if (!(this_present_actors && that_present_actors))
          return false;
        if (!this.actors.equals(that.actors))
          return false;
      }

      boolean this_present_actortype = true && this.isSetActortype();
      boolean that_present_actortype = true && that.isSetActortype();
      if (this_present_actortype || that_present_actortype) {
        if (!(this_present_actortype && that_present_actortype))
          return false;
        if (!this.actortype.equals(that.actortype))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_flags = true && this.isSetFlags();
      boolean that_present_flags = true && that.isSetFlags();
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (!this.flags.equals(that.flags))
          return false;
      }

      boolean this_present_bindingvals = true && this.isSetBindingvals();
      boolean that_present_bindingvals = true && that.isSetBindingvals();
      if (this_present_bindingvals || that_present_bindingvals) {
        if (!(this_present_bindingvals && that_present_bindingvals))
          return false;
        if (!this.bindingvals.equals(that.bindingvals))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_actors = true && (isSetActors());
      list.add(present_actors);
      if (present_actors)
        list.add(actors);

      boolean present_actortype = true && (isSetActortype());
      list.add(present_actortype);
      if (present_actortype)
        list.add(actortype);

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      boolean present_flags = true && (isSetFlags());
      list.add(present_flags);
      if (present_flags)
        list.add(flags);

      boolean present_bindingvals = true && (isSetBindingvals());
      list.add(present_bindingvals);
      if (present_bindingvals)
        list.add(bindingvals);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_multi_prepare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActors()).compareTo(other.isSetActors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actors, other.actors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActortype()).compareTo(other.isSetActortype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActortype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actortype, other.actortype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBindingvals()).compareTo(other.isSetBindingvals());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindingvals()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindingvals, other.bindingvals);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_multi_prepare_args(");
      boolean first = true;

      sb.append("actors:");
      if (this.actors == null) {
        sb.append("null");
      } else {
        sb.append(this.actors);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actortype:");
      if (this.actortype == null) {
        sb.append("null");
      } else {
        sb.append(this.actortype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bindingvals:");
      if (this.bindingvals == null) {
        sb.append("null");
      } else {
        sb.append(this.bindingvals);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (actors == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actors' was not present! Struct: " + toString());
      }
      if (actortype == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actortype' was not present! Struct: " + toString());
      }
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_multi_prepare_argsStandardSchemeFactory implements SchemeFactory {
      public exec_multi_prepare_argsStandardScheme getScheme() {
        return new exec_multi_prepare_argsStandardScheme();
      }
    }

    private static class exec_multi_prepare_argsStandardScheme extends StandardScheme<exec_multi_prepare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_multi_prepare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTORS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.actors = new ArrayList<String>(_list114.size);
                  String _elem115;
                  for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                  {
                    _elem115 = iprot.readString();
                    struct.actors.add(_elem115);
                  }
                  iprot.readListEnd();
                }
                struct.setActorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTORTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actortype = iprot.readString();
                struct.setActortypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list117 = iprot.readListBegin();
                  struct.flags = new ArrayList<String>(_list117.size);
                  String _elem118;
                  for (int _i119 = 0; _i119 < _list117.size; ++_i119)
                  {
                    _elem118 = iprot.readString();
                    struct.flags.add(_elem118);
                  }
                  iprot.readListEnd();
                }
                struct.setFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BINDINGVALS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.bindingvals = new ArrayList<List<Val>>(_list120.size);
                  List<Val> _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    {
                      org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                      _elem121 = new ArrayList<Val>(_list123.size);
                      Val _elem124;
                      for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                      {
                        _elem124 = new Val();
                        _elem124.read(iprot);
                        _elem121.add(_elem124);
                      }
                      iprot.readListEnd();
                    }
                    struct.bindingvals.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setBindingvalsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_multi_prepare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.actors != null) {
          oprot.writeFieldBegin(ACTORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.actors.size()));
            for (String _iter126 : struct.actors)
            {
              oprot.writeString(_iter126);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.actortype != null) {
          oprot.writeFieldBegin(ACTORTYPE_FIELD_DESC);
          oprot.writeString(struct.actortype);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.flags != null) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.flags.size()));
            for (String _iter127 : struct.flags)
            {
              oprot.writeString(_iter127);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bindingvals != null) {
          oprot.writeFieldBegin(BINDINGVALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.bindingvals.size()));
            for (List<Val> _iter128 : struct.bindingvals)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter128.size()));
                for (Val _iter129 : _iter128)
                {
                  _iter129.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_multi_prepare_argsTupleSchemeFactory implements SchemeFactory {
      public exec_multi_prepare_argsTupleScheme getScheme() {
        return new exec_multi_prepare_argsTupleScheme();
      }
    }

    private static class exec_multi_prepare_argsTupleScheme extends TupleScheme<exec_multi_prepare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_multi_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.actors.size());
          for (String _iter130 : struct.actors)
          {
            oprot.writeString(_iter130);
          }
        }
        oprot.writeString(struct.actortype);
        oprot.writeString(struct.sql);
        BitSet optionals = new BitSet();
        if (struct.isSetFlags()) {
          optionals.set(0);
        }
        if (struct.isSetBindingvals()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFlags()) {
          {
            oprot.writeI32(struct.flags.size());
            for (String _iter131 : struct.flags)
            {
              oprot.writeString(_iter131);
            }
          }
        }
        if (struct.isSetBindingvals()) {
          {
            oprot.writeI32(struct.bindingvals.size());
            for (List<Val> _iter132 : struct.bindingvals)
            {
              {
                oprot.writeI32(_iter132.size());
                for (Val _iter133 : _iter132)
                {
                  _iter133.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_multi_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list134 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.actors = new ArrayList<String>(_list134.size);
          String _elem135;
          for (int _i136 = 0; _i136 < _list134.size; ++_i136)
          {
            _elem135 = iprot.readString();
            struct.actors.add(_elem135);
          }
        }
        struct.setActorsIsSet(true);
        struct.actortype = iprot.readString();
        struct.setActortypeIsSet(true);
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.flags = new ArrayList<String>(_list137.size);
            String _elem138;
            for (int _i139 = 0; _i139 < _list137.size; ++_i139)
            {
              _elem138 = iprot.readString();
              struct.flags.add(_elem138);
            }
          }
          struct.setFlagsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list140 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.bindingvals = new ArrayList<List<Val>>(_list140.size);
            List<Val> _elem141;
            for (int _i142 = 0; _i142 < _list140.size; ++_i142)
            {
              {
                org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem141 = new ArrayList<Val>(_list143.size);
                Val _elem144;
                for (int _i145 = 0; _i145 < _list143.size; ++_i145)
                {
                  _elem144 = new Val();
                  _elem144.read(iprot);
                  _elem141.add(_elem144);
                }
              }
              struct.bindingvals.add(_elem141);
            }
          }
          struct.setBindingvalsIsSet(true);
        }
      }
    }

  }

  public static class exec_multi_prepare_result implements org.apache.thrift.TBase<exec_multi_prepare_result, exec_multi_prepare_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_multi_prepare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_multi_prepare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_multi_prepare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_multi_prepare_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_multi_prepare_result.class, metaDataMap);
    }

    public exec_multi_prepare_result() {
    }

    public exec_multi_prepare_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_multi_prepare_result(exec_multi_prepare_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_multi_prepare_result deepCopy() {
      return new exec_multi_prepare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_multi_prepare_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_multi_prepare_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_multi_prepare_result)
        return this.equals((exec_multi_prepare_result)that);
      return false;
    }

    public boolean equals(exec_multi_prepare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_multi_prepare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_multi_prepare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_multi_prepare_resultStandardSchemeFactory implements SchemeFactory {
      public exec_multi_prepare_resultStandardScheme getScheme() {
        return new exec_multi_prepare_resultStandardScheme();
      }
    }

    private static class exec_multi_prepare_resultStandardScheme extends StandardScheme<exec_multi_prepare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_multi_prepare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_multi_prepare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_multi_prepare_resultTupleSchemeFactory implements SchemeFactory {
      public exec_multi_prepare_resultTupleScheme getScheme() {
        return new exec_multi_prepare_resultTupleScheme();
      }
    }

    private static class exec_multi_prepare_resultTupleScheme extends TupleScheme<exec_multi_prepare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_multi_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_multi_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_all_args implements org.apache.thrift.TBase<exec_all_args, exec_all_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_all_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_all_args");

    private static final org.apache.thrift.protocol.TField ACTORTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actortype", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_all_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_all_argsTupleSchemeFactory());
    }

    public String actortype; // required
    public String sql; // required
    public List<String> flags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTORTYPE((short)1, "actortype"),
      SQL((short)2, "sql"),
      FLAGS((short)3, "flags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTORTYPE
            return ACTORTYPE;
          case 2: // SQL
            return SQL;
          case 3: // FLAGS
            return FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTORTYPE, new org.apache.thrift.meta_data.FieldMetaData("actortype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_all_args.class, metaDataMap);
    }

    public exec_all_args() {
      this.flags = new ArrayList<String>();

    }

    public exec_all_args(
      String actortype,
      String sql,
      List<String> flags)
    {
      this();
      this.actortype = actortype;
      this.sql = sql;
      this.flags = flags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_all_args(exec_all_args other) {
      if (other.isSetActortype()) {
        this.actortype = other.actortype;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetFlags()) {
        List<String> __this__flags = new ArrayList<String>(other.flags);
        this.flags = __this__flags;
      }
    }

    public exec_all_args deepCopy() {
      return new exec_all_args(this);
    }

    @Override
    public void clear() {
      this.actortype = null;
      this.sql = null;
      this.flags = new ArrayList<String>();

    }

    public String getActortype() {
      return this.actortype;
    }

    public exec_all_args setActortype(String actortype) {
      this.actortype = actortype;
      return this;
    }

    public void unsetActortype() {
      this.actortype = null;
    }

    /** Returns true if field actortype is set (has been assigned a value) and false otherwise */
    public boolean isSetActortype() {
      return this.actortype != null;
    }

    public void setActortypeIsSet(boolean value) {
      if (!value) {
        this.actortype = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public exec_all_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getFlagsSize() {
      return (this.flags == null) ? 0 : this.flags.size();
    }

    public java.util.Iterator<String> getFlagsIterator() {
      return (this.flags == null) ? null : this.flags.iterator();
    }

    public void addToFlags(String elem) {
      if (this.flags == null) {
        this.flags = new ArrayList<String>();
      }
      this.flags.add(elem);
    }

    public List<String> getFlags() {
      return this.flags;
    }

    public exec_all_args setFlags(List<String> flags) {
      this.flags = flags;
      return this;
    }

    public void unsetFlags() {
      this.flags = null;
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return this.flags != null;
    }

    public void setFlagsIsSet(boolean value) {
      if (!value) {
        this.flags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTORTYPE:
        if (value == null) {
          unsetActortype();
        } else {
          setActortype((String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTORTYPE:
        return getActortype();

      case SQL:
        return getSql();

      case FLAGS:
        return getFlags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTORTYPE:
        return isSetActortype();
      case SQL:
        return isSetSql();
      case FLAGS:
        return isSetFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_all_args)
        return this.equals((exec_all_args)that);
      return false;
    }

    public boolean equals(exec_all_args that) {
      if (that == null)
        return false;

      boolean this_present_actortype = true && this.isSetActortype();
      boolean that_present_actortype = true && that.isSetActortype();
      if (this_present_actortype || that_present_actortype) {
        if (!(this_present_actortype && that_present_actortype))
          return false;
        if (!this.actortype.equals(that.actortype))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_flags = true && this.isSetFlags();
      boolean that_present_flags = true && that.isSetFlags();
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (!this.flags.equals(that.flags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_actortype = true && (isSetActortype());
      list.add(present_actortype);
      if (present_actortype)
        list.add(actortype);

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      boolean present_flags = true && (isSetFlags());
      list.add(present_flags);
      if (present_flags)
        list.add(flags);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_all_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActortype()).compareTo(other.isSetActortype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActortype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actortype, other.actortype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_all_args(");
      boolean first = true;

      sb.append("actortype:");
      if (this.actortype == null) {
        sb.append("null");
      } else {
        sb.append(this.actortype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (actortype == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actortype' was not present! Struct: " + toString());
      }
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_all_argsStandardSchemeFactory implements SchemeFactory {
      public exec_all_argsStandardScheme getScheme() {
        return new exec_all_argsStandardScheme();
      }
    }

    private static class exec_all_argsStandardScheme extends StandardScheme<exec_all_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_all_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTORTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actortype = iprot.readString();
                struct.setActortypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.flags = new ArrayList<String>(_list146.size);
                  String _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = iprot.readString();
                    struct.flags.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_all_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.actortype != null) {
          oprot.writeFieldBegin(ACTORTYPE_FIELD_DESC);
          oprot.writeString(struct.actortype);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.flags != null) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.flags.size()));
            for (String _iter149 : struct.flags)
            {
              oprot.writeString(_iter149);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_all_argsTupleSchemeFactory implements SchemeFactory {
      public exec_all_argsTupleScheme getScheme() {
        return new exec_all_argsTupleScheme();
      }
    }

    private static class exec_all_argsTupleScheme extends TupleScheme<exec_all_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_all_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.actortype);
        oprot.writeString(struct.sql);
        BitSet optionals = new BitSet();
        if (struct.isSetFlags()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFlags()) {
          {
            oprot.writeI32(struct.flags.size());
            for (String _iter150 : struct.flags)
            {
              oprot.writeString(_iter150);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_all_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.actortype = iprot.readString();
        struct.setActortypeIsSet(true);
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.flags = new ArrayList<String>(_list151.size);
            String _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = iprot.readString();
              struct.flags.add(_elem152);
            }
          }
          struct.setFlagsIsSet(true);
        }
      }
    }

  }

  public static class exec_all_result implements org.apache.thrift.TBase<exec_all_result, exec_all_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_all_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_all_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_all_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_all_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_all_result.class, metaDataMap);
    }

    public exec_all_result() {
    }

    public exec_all_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_all_result(exec_all_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_all_result deepCopy() {
      return new exec_all_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_all_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_all_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_all_result)
        return this.equals((exec_all_result)that);
      return false;
    }

    public boolean equals(exec_all_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_all_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_all_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_all_resultStandardSchemeFactory implements SchemeFactory {
      public exec_all_resultStandardScheme getScheme() {
        return new exec_all_resultStandardScheme();
      }
    }

    private static class exec_all_resultStandardScheme extends StandardScheme<exec_all_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_all_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_all_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_all_resultTupleSchemeFactory implements SchemeFactory {
      public exec_all_resultTupleScheme getScheme() {
        return new exec_all_resultTupleScheme();
      }
    }

    private static class exec_all_resultTupleScheme extends TupleScheme<exec_all_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_all_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_all_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_all_prepare_args implements org.apache.thrift.TBase<exec_all_prepare_args, exec_all_prepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_all_prepare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_all_prepare_args");

    private static final org.apache.thrift.protocol.TField ACTORTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actortype", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField BINDINGVALS_FIELD_DESC = new org.apache.thrift.protocol.TField("bindingvals", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_all_prepare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_all_prepare_argsTupleSchemeFactory());
    }

    public String actortype; // required
    public String sql; // required
    public List<String> flags; // required
    public List<List<Val>> bindingvals; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTORTYPE((short)1, "actortype"),
      SQL((short)2, "sql"),
      FLAGS((short)3, "flags"),
      BINDINGVALS((short)4, "bindingvals");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTORTYPE
            return ACTORTYPE;
          case 2: // SQL
            return SQL;
          case 3: // FLAGS
            return FLAGS;
          case 4: // BINDINGVALS
            return BINDINGVALS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTORTYPE, new org.apache.thrift.meta_data.FieldMetaData("actortype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BINDINGVALS, new org.apache.thrift.meta_data.FieldMetaData("bindingvals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Val.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_all_prepare_args.class, metaDataMap);
    }

    public exec_all_prepare_args() {
      this.flags = new ArrayList<String>();

      this.bindingvals = new ArrayList<List<Val>>();

    }

    public exec_all_prepare_args(
      String actortype,
      String sql,
      List<String> flags,
      List<List<Val>> bindingvals)
    {
      this();
      this.actortype = actortype;
      this.sql = sql;
      this.flags = flags;
      this.bindingvals = bindingvals;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_all_prepare_args(exec_all_prepare_args other) {
      if (other.isSetActortype()) {
        this.actortype = other.actortype;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetFlags()) {
        List<String> __this__flags = new ArrayList<String>(other.flags);
        this.flags = __this__flags;
      }
      if (other.isSetBindingvals()) {
        List<List<Val>> __this__bindingvals = new ArrayList<List<Val>>(other.bindingvals.size());
        for (List<Val> other_element : other.bindingvals) {
          List<Val> __this__bindingvals_copy = new ArrayList<Val>(other_element.size());
          for (Val other_element_element : other_element) {
            __this__bindingvals_copy.add(new Val(other_element_element));
          }
          __this__bindingvals.add(__this__bindingvals_copy);
        }
        this.bindingvals = __this__bindingvals;
      }
    }

    public exec_all_prepare_args deepCopy() {
      return new exec_all_prepare_args(this);
    }

    @Override
    public void clear() {
      this.actortype = null;
      this.sql = null;
      this.flags = new ArrayList<String>();

      this.bindingvals = new ArrayList<List<Val>>();

    }

    public String getActortype() {
      return this.actortype;
    }

    public exec_all_prepare_args setActortype(String actortype) {
      this.actortype = actortype;
      return this;
    }

    public void unsetActortype() {
      this.actortype = null;
    }

    /** Returns true if field actortype is set (has been assigned a value) and false otherwise */
    public boolean isSetActortype() {
      return this.actortype != null;
    }

    public void setActortypeIsSet(boolean value) {
      if (!value) {
        this.actortype = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public exec_all_prepare_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getFlagsSize() {
      return (this.flags == null) ? 0 : this.flags.size();
    }

    public java.util.Iterator<String> getFlagsIterator() {
      return (this.flags == null) ? null : this.flags.iterator();
    }

    public void addToFlags(String elem) {
      if (this.flags == null) {
        this.flags = new ArrayList<String>();
      }
      this.flags.add(elem);
    }

    public List<String> getFlags() {
      return this.flags;
    }

    public exec_all_prepare_args setFlags(List<String> flags) {
      this.flags = flags;
      return this;
    }

    public void unsetFlags() {
      this.flags = null;
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return this.flags != null;
    }

    public void setFlagsIsSet(boolean value) {
      if (!value) {
        this.flags = null;
      }
    }

    public int getBindingvalsSize() {
      return (this.bindingvals == null) ? 0 : this.bindingvals.size();
    }

    public java.util.Iterator<List<Val>> getBindingvalsIterator() {
      return (this.bindingvals == null) ? null : this.bindingvals.iterator();
    }

    public void addToBindingvals(List<Val> elem) {
      if (this.bindingvals == null) {
        this.bindingvals = new ArrayList<List<Val>>();
      }
      this.bindingvals.add(elem);
    }

    public List<List<Val>> getBindingvals() {
      return this.bindingvals;
    }

    public exec_all_prepare_args setBindingvals(List<List<Val>> bindingvals) {
      this.bindingvals = bindingvals;
      return this;
    }

    public void unsetBindingvals() {
      this.bindingvals = null;
    }

    /** Returns true if field bindingvals is set (has been assigned a value) and false otherwise */
    public boolean isSetBindingvals() {
      return this.bindingvals != null;
    }

    public void setBindingvalsIsSet(boolean value) {
      if (!value) {
        this.bindingvals = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTORTYPE:
        if (value == null) {
          unsetActortype();
        } else {
          setActortype((String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((List<String>)value);
        }
        break;

      case BINDINGVALS:
        if (value == null) {
          unsetBindingvals();
        } else {
          setBindingvals((List<List<Val>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTORTYPE:
        return getActortype();

      case SQL:
        return getSql();

      case FLAGS:
        return getFlags();

      case BINDINGVALS:
        return getBindingvals();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTORTYPE:
        return isSetActortype();
      case SQL:
        return isSetSql();
      case FLAGS:
        return isSetFlags();
      case BINDINGVALS:
        return isSetBindingvals();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_all_prepare_args)
        return this.equals((exec_all_prepare_args)that);
      return false;
    }

    public boolean equals(exec_all_prepare_args that) {
      if (that == null)
        return false;

      boolean this_present_actortype = true && this.isSetActortype();
      boolean that_present_actortype = true && that.isSetActortype();
      if (this_present_actortype || that_present_actortype) {
        if (!(this_present_actortype && that_present_actortype))
          return false;
        if (!this.actortype.equals(that.actortype))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_flags = true && this.isSetFlags();
      boolean that_present_flags = true && that.isSetFlags();
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (!this.flags.equals(that.flags))
          return false;
      }

      boolean this_present_bindingvals = true && this.isSetBindingvals();
      boolean that_present_bindingvals = true && that.isSetBindingvals();
      if (this_present_bindingvals || that_present_bindingvals) {
        if (!(this_present_bindingvals && that_present_bindingvals))
          return false;
        if (!this.bindingvals.equals(that.bindingvals))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_actortype = true && (isSetActortype());
      list.add(present_actortype);
      if (present_actortype)
        list.add(actortype);

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      boolean present_flags = true && (isSetFlags());
      list.add(present_flags);
      if (present_flags)
        list.add(flags);

      boolean present_bindingvals = true && (isSetBindingvals());
      list.add(present_bindingvals);
      if (present_bindingvals)
        list.add(bindingvals);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_all_prepare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActortype()).compareTo(other.isSetActortype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActortype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actortype, other.actortype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBindingvals()).compareTo(other.isSetBindingvals());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindingvals()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindingvals, other.bindingvals);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_all_prepare_args(");
      boolean first = true;

      sb.append("actortype:");
      if (this.actortype == null) {
        sb.append("null");
      } else {
        sb.append(this.actortype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bindingvals:");
      if (this.bindingvals == null) {
        sb.append("null");
      } else {
        sb.append(this.bindingvals);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (actortype == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actortype' was not present! Struct: " + toString());
      }
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_all_prepare_argsStandardSchemeFactory implements SchemeFactory {
      public exec_all_prepare_argsStandardScheme getScheme() {
        return new exec_all_prepare_argsStandardScheme();
      }
    }

    private static class exec_all_prepare_argsStandardScheme extends StandardScheme<exec_all_prepare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_all_prepare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTORTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actortype = iprot.readString();
                struct.setActortypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                  struct.flags = new ArrayList<String>(_list154.size);
                  String _elem155;
                  for (int _i156 = 0; _i156 < _list154.size; ++_i156)
                  {
                    _elem155 = iprot.readString();
                    struct.flags.add(_elem155);
                  }
                  iprot.readListEnd();
                }
                struct.setFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BINDINGVALS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list157 = iprot.readListBegin();
                  struct.bindingvals = new ArrayList<List<Val>>(_list157.size);
                  List<Val> _elem158;
                  for (int _i159 = 0; _i159 < _list157.size; ++_i159)
                  {
                    {
                      org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                      _elem158 = new ArrayList<Val>(_list160.size);
                      Val _elem161;
                      for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                      {
                        _elem161 = new Val();
                        _elem161.read(iprot);
                        _elem158.add(_elem161);
                      }
                      iprot.readListEnd();
                    }
                    struct.bindingvals.add(_elem158);
                  }
                  iprot.readListEnd();
                }
                struct.setBindingvalsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_all_prepare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.actortype != null) {
          oprot.writeFieldBegin(ACTORTYPE_FIELD_DESC);
          oprot.writeString(struct.actortype);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.flags != null) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.flags.size()));
            for (String _iter163 : struct.flags)
            {
              oprot.writeString(_iter163);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bindingvals != null) {
          oprot.writeFieldBegin(BINDINGVALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.bindingvals.size()));
            for (List<Val> _iter164 : struct.bindingvals)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter164.size()));
                for (Val _iter165 : _iter164)
                {
                  _iter165.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_all_prepare_argsTupleSchemeFactory implements SchemeFactory {
      public exec_all_prepare_argsTupleScheme getScheme() {
        return new exec_all_prepare_argsTupleScheme();
      }
    }

    private static class exec_all_prepare_argsTupleScheme extends TupleScheme<exec_all_prepare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_all_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.actortype);
        oprot.writeString(struct.sql);
        BitSet optionals = new BitSet();
        if (struct.isSetFlags()) {
          optionals.set(0);
        }
        if (struct.isSetBindingvals()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFlags()) {
          {
            oprot.writeI32(struct.flags.size());
            for (String _iter166 : struct.flags)
            {
              oprot.writeString(_iter166);
            }
          }
        }
        if (struct.isSetBindingvals()) {
          {
            oprot.writeI32(struct.bindingvals.size());
            for (List<Val> _iter167 : struct.bindingvals)
            {
              {
                oprot.writeI32(_iter167.size());
                for (Val _iter168 : _iter167)
                {
                  _iter168.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_all_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.actortype = iprot.readString();
        struct.setActortypeIsSet(true);
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.flags = new ArrayList<String>(_list169.size);
            String _elem170;
            for (int _i171 = 0; _i171 < _list169.size; ++_i171)
            {
              _elem170 = iprot.readString();
              struct.flags.add(_elem170);
            }
          }
          struct.setFlagsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list172 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.bindingvals = new ArrayList<List<Val>>(_list172.size);
            List<Val> _elem173;
            for (int _i174 = 0; _i174 < _list172.size; ++_i174)
            {
              {
                org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem173 = new ArrayList<Val>(_list175.size);
                Val _elem176;
                for (int _i177 = 0; _i177 < _list175.size; ++_i177)
                {
                  _elem176 = new Val();
                  _elem176.read(iprot);
                  _elem173.add(_elem176);
                }
              }
              struct.bindingvals.add(_elem173);
            }
          }
          struct.setBindingvalsIsSet(true);
        }
      }
    }

  }

  public static class exec_all_prepare_result implements org.apache.thrift.TBase<exec_all_prepare_result, exec_all_prepare_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_all_prepare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_all_prepare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_all_prepare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_all_prepare_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_all_prepare_result.class, metaDataMap);
    }

    public exec_all_prepare_result() {
    }

    public exec_all_prepare_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_all_prepare_result(exec_all_prepare_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_all_prepare_result deepCopy() {
      return new exec_all_prepare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_all_prepare_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_all_prepare_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_all_prepare_result)
        return this.equals((exec_all_prepare_result)that);
      return false;
    }

    public boolean equals(exec_all_prepare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_all_prepare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_all_prepare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_all_prepare_resultStandardSchemeFactory implements SchemeFactory {
      public exec_all_prepare_resultStandardScheme getScheme() {
        return new exec_all_prepare_resultStandardScheme();
      }
    }

    private static class exec_all_prepare_resultStandardScheme extends StandardScheme<exec_all_prepare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_all_prepare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_all_prepare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_all_prepare_resultTupleSchemeFactory implements SchemeFactory {
      public exec_all_prepare_resultTupleScheme getScheme() {
        return new exec_all_prepare_resultTupleScheme();
      }
    }

    private static class exec_all_prepare_resultTupleScheme extends TupleScheme<exec_all_prepare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_all_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_all_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_sql_args implements org.apache.thrift.TBase<exec_sql_args, exec_sql_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_sql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_sql_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_sql_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_sql_argsTupleSchemeFactory());
    }

    public String sql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_sql_args.class, metaDataMap);
    }

    public exec_sql_args() {
    }

    public exec_sql_args(
      String sql)
    {
      this();
      this.sql = sql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_sql_args(exec_sql_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public exec_sql_args deepCopy() {
      return new exec_sql_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
    }

    public String getSql() {
      return this.sql;
    }

    public exec_sql_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_sql_args)
        return this.equals((exec_sql_args)that);
      return false;
    }

    public boolean equals(exec_sql_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_sql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_sql_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_sql_argsStandardSchemeFactory implements SchemeFactory {
      public exec_sql_argsStandardScheme getScheme() {
        return new exec_sql_argsStandardScheme();
      }
    }

    private static class exec_sql_argsStandardScheme extends StandardScheme<exec_sql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_sql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_sql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_sql_argsTupleSchemeFactory implements SchemeFactory {
      public exec_sql_argsTupleScheme getScheme() {
        return new exec_sql_argsTupleScheme();
      }
    }

    private static class exec_sql_argsTupleScheme extends TupleScheme<exec_sql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_sql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.sql);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_sql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
      }
    }

  }

  public static class exec_sql_result implements org.apache.thrift.TBase<exec_sql_result, exec_sql_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_sql_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_sql_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_sql_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_sql_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_sql_result.class, metaDataMap);
    }

    public exec_sql_result() {
    }

    public exec_sql_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_sql_result(exec_sql_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_sql_result deepCopy() {
      return new exec_sql_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_sql_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_sql_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_sql_result)
        return this.equals((exec_sql_result)that);
      return false;
    }

    public boolean equals(exec_sql_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_sql_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_sql_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_sql_resultStandardSchemeFactory implements SchemeFactory {
      public exec_sql_resultStandardScheme getScheme() {
        return new exec_sql_resultStandardScheme();
      }
    }

    private static class exec_sql_resultStandardScheme extends StandardScheme<exec_sql_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_sql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_sql_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_sql_resultTupleSchemeFactory implements SchemeFactory {
      public exec_sql_resultTupleScheme getScheme() {
        return new exec_sql_resultTupleScheme();
      }
    }

    private static class exec_sql_resultTupleScheme extends TupleScheme<exec_sql_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_sql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_sql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class exec_sql_prepare_args implements org.apache.thrift.TBase<exec_sql_prepare_args, exec_sql_prepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_sql_prepare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_sql_prepare_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BINDINGVALS_FIELD_DESC = new org.apache.thrift.protocol.TField("bindingvals", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_sql_prepare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_sql_prepare_argsTupleSchemeFactory());
    }

    public String sql; // required
    public List<List<Val>> bindingvals; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql"),
      BINDINGVALS((short)2, "bindingvals");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          case 2: // BINDINGVALS
            return BINDINGVALS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BINDINGVALS, new org.apache.thrift.meta_data.FieldMetaData("bindingvals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Val.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_sql_prepare_args.class, metaDataMap);
    }

    public exec_sql_prepare_args() {
      this.bindingvals = new ArrayList<List<Val>>();

    }

    public exec_sql_prepare_args(
      String sql,
      List<List<Val>> bindingvals)
    {
      this();
      this.sql = sql;
      this.bindingvals = bindingvals;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_sql_prepare_args(exec_sql_prepare_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetBindingvals()) {
        List<List<Val>> __this__bindingvals = new ArrayList<List<Val>>(other.bindingvals.size());
        for (List<Val> other_element : other.bindingvals) {
          List<Val> __this__bindingvals_copy = new ArrayList<Val>(other_element.size());
          for (Val other_element_element : other_element) {
            __this__bindingvals_copy.add(new Val(other_element_element));
          }
          __this__bindingvals.add(__this__bindingvals_copy);
        }
        this.bindingvals = __this__bindingvals;
      }
    }

    public exec_sql_prepare_args deepCopy() {
      return new exec_sql_prepare_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
      this.bindingvals = new ArrayList<List<Val>>();

    }

    public String getSql() {
      return this.sql;
    }

    public exec_sql_prepare_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getBindingvalsSize() {
      return (this.bindingvals == null) ? 0 : this.bindingvals.size();
    }

    public java.util.Iterator<List<Val>> getBindingvalsIterator() {
      return (this.bindingvals == null) ? null : this.bindingvals.iterator();
    }

    public void addToBindingvals(List<Val> elem) {
      if (this.bindingvals == null) {
        this.bindingvals = new ArrayList<List<Val>>();
      }
      this.bindingvals.add(elem);
    }

    public List<List<Val>> getBindingvals() {
      return this.bindingvals;
    }

    public exec_sql_prepare_args setBindingvals(List<List<Val>> bindingvals) {
      this.bindingvals = bindingvals;
      return this;
    }

    public void unsetBindingvals() {
      this.bindingvals = null;
    }

    /** Returns true if field bindingvals is set (has been assigned a value) and false otherwise */
    public boolean isSetBindingvals() {
      return this.bindingvals != null;
    }

    public void setBindingvalsIsSet(boolean value) {
      if (!value) {
        this.bindingvals = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case BINDINGVALS:
        if (value == null) {
          unsetBindingvals();
        } else {
          setBindingvals((List<List<Val>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      case BINDINGVALS:
        return getBindingvals();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      case BINDINGVALS:
        return isSetBindingvals();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_sql_prepare_args)
        return this.equals((exec_sql_prepare_args)that);
      return false;
    }

    public boolean equals(exec_sql_prepare_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_bindingvals = true && this.isSetBindingvals();
      boolean that_present_bindingvals = true && that.isSetBindingvals();
      if (this_present_bindingvals || that_present_bindingvals) {
        if (!(this_present_bindingvals && that_present_bindingvals))
          return false;
        if (!this.bindingvals.equals(that.bindingvals))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sql = true && (isSetSql());
      list.add(present_sql);
      if (present_sql)
        list.add(sql);

      boolean present_bindingvals = true && (isSetBindingvals());
      list.add(present_bindingvals);
      if (present_bindingvals)
        list.add(bindingvals);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_sql_prepare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBindingvals()).compareTo(other.isSetBindingvals());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindingvals()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindingvals, other.bindingvals);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_sql_prepare_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bindingvals:");
      if (this.bindingvals == null) {
        sb.append("null");
      } else {
        sb.append(this.bindingvals);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (sql == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_sql_prepare_argsStandardSchemeFactory implements SchemeFactory {
      public exec_sql_prepare_argsStandardScheme getScheme() {
        return new exec_sql_prepare_argsStandardScheme();
      }
    }

    private static class exec_sql_prepare_argsStandardScheme extends StandardScheme<exec_sql_prepare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_sql_prepare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BINDINGVALS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                  struct.bindingvals = new ArrayList<List<Val>>(_list178.size);
                  List<Val> _elem179;
                  for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                  {
                    {
                      org.apache.thrift.protocol.TList _list181 = iprot.readListBegin();
                      _elem179 = new ArrayList<Val>(_list181.size);
                      Val _elem182;
                      for (int _i183 = 0; _i183 < _list181.size; ++_i183)
                      {
                        _elem182 = new Val();
                        _elem182.read(iprot);
                        _elem179.add(_elem182);
                      }
                      iprot.readListEnd();
                    }
                    struct.bindingvals.add(_elem179);
                  }
                  iprot.readListEnd();
                }
                struct.setBindingvalsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_sql_prepare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.bindingvals != null) {
          oprot.writeFieldBegin(BINDINGVALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.bindingvals.size()));
            for (List<Val> _iter184 : struct.bindingvals)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter184.size()));
                for (Val _iter185 : _iter184)
                {
                  _iter185.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_sql_prepare_argsTupleSchemeFactory implements SchemeFactory {
      public exec_sql_prepare_argsTupleScheme getScheme() {
        return new exec_sql_prepare_argsTupleScheme();
      }
    }

    private static class exec_sql_prepare_argsTupleScheme extends TupleScheme<exec_sql_prepare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_sql_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.sql);
        BitSet optionals = new BitSet();
        if (struct.isSetBindingvals()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBindingvals()) {
          {
            oprot.writeI32(struct.bindingvals.size());
            for (List<Val> _iter186 : struct.bindingvals)
            {
              {
                oprot.writeI32(_iter186.size());
                for (Val _iter187 : _iter186)
                {
                  _iter187.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_sql_prepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list188 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.bindingvals = new ArrayList<List<Val>>(_list188.size);
            List<Val> _elem189;
            for (int _i190 = 0; _i190 < _list188.size; ++_i190)
            {
              {
                org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem189 = new ArrayList<Val>(_list191.size);
                Val _elem192;
                for (int _i193 = 0; _i193 < _list191.size; ++_i193)
                {
                  _elem192 = new Val();
                  _elem192.read(iprot);
                  _elem189.add(_elem192);
                }
              }
              struct.bindingvals.add(_elem189);
            }
          }
          struct.setBindingvalsIsSet(true);
        }
      }
    }

  }

  public static class exec_sql_prepare_result implements org.apache.thrift.TBase<exec_sql_prepare_result, exec_sql_prepare_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_sql_prepare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_sql_prepare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_sql_prepare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_sql_prepare_resultTupleSchemeFactory());
    }

    public Result success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_sql_prepare_result.class, metaDataMap);
    }

    public exec_sql_prepare_result() {
    }

    public exec_sql_prepare_result(
      Result success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_sql_prepare_result(exec_sql_prepare_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public exec_sql_prepare_result deepCopy() {
      return new exec_sql_prepare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exec_sql_prepare_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public exec_sql_prepare_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_sql_prepare_result)
        return this.equals((exec_sql_prepare_result)that);
      return false;
    }

    public boolean equals(exec_sql_prepare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_sql_prepare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_sql_prepare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_sql_prepare_resultStandardSchemeFactory implements SchemeFactory {
      public exec_sql_prepare_resultStandardScheme getScheme() {
        return new exec_sql_prepare_resultStandardScheme();
      }
    }

    private static class exec_sql_prepare_resultStandardScheme extends StandardScheme<exec_sql_prepare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_sql_prepare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_sql_prepare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_sql_prepare_resultTupleSchemeFactory implements SchemeFactory {
      public exec_sql_prepare_resultTupleScheme getScheme() {
        return new exec_sql_prepare_resultTupleScheme();
      }
    }

    private static class exec_sql_prepare_resultTupleScheme extends TupleScheme<exec_sql_prepare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_sql_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_sql_prepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

}
